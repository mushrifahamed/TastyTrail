
/* File: ./client_web\eslint.config.js */
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]


/* File: ./client_web\vite.config.js */

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    port: 5199,
  },
});



/* File: ./client_web\src\App.css */
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


/* File: ./client_web\src\App.jsx */
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import Layout from "./components/Layout";
import Login from "./pages/Auth/Login";
import RestaurantAdminRequest from "./pages/Auth/RestaurantAdminRequest";
import AdminDashboard from "./pages/admin/Dashboard";
import AdminUsers from "./pages/admin/Users";
import AdminRestaurantAdmins from "./pages/admin/RestaurantAdmins";
import RestaurantManagement from "./pages/admin/RestaurantManagement";
import AdminDeliveryPersonnel from "./pages/admin/DeliveryPersonnel";
import RestaurantAdminDashboard from "./pages/restaurant-admin/Dashboard";
import RestaurantAdminProfile from "./pages/restaurant-admin/Profile";
import NotFound from "./pages/NotFound";
import ProtectedRoute from "./components/ProtectedRoute";

function App() {
  return (
    <Router>
      <AuthProvider>
        <Routes>
          {/* Public routes */}
          <Route path="/login" element={<Login />} />
          <Route
            path="/restaurant-admin/request"
            element={<RestaurantAdminRequest />}
          />

          {/* Admin routes */}
          <Route
            path="/admin"
            element={<ProtectedRoute allowedRoles={["admin"]} />}
          >
            <Route element={<Layout role="admin" />}>
              <Route index element={<AdminDashboard />} />
              <Route path="users" element={<AdminUsers />} />
              <Route
                path="restaurant-admins"
                element={<AdminRestaurantAdmins />}
              />
              <Route
                path="delivery-personnel"
                element={<AdminDeliveryPersonnel />}
              />
              <Route
                path="restaurant-management"
                element={<RestaurantManagement />}
              />
            </Route>
          </Route>

          {/* Restaurant admin routes */}
          <Route
            path="/restaurant-admin"
            element={<ProtectedRoute allowedRoles={["restaurant_admin"]} />}
          >
            <Route element={<Layout role="restaurant_admin" />}>
              <Route index element={<RestaurantAdminDashboard />} />
              <Route path="profile" element={<RestaurantAdminProfile />} />
            </Route>
          </Route>

          {/* 404 */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </AuthProvider>
    </Router>
  );
}

export default App;



/* File: ./client_web\src\index.css */

@import "tailwindcss";


/* File: ./client_web\src\main.jsx */

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



/* File: ./client_web\src\components\Layout.jsx */
import { Outlet } from "react-router-dom";
import Sidebar from "./layout/Sidebar";

const Layout = ({ role }) => {
  return (
    <div className="flex">
      <Sidebar role={role} />
      <div className="flex-1 ml-64 p-6">
        <Outlet />
      </div>
    </div>
  );
};

export default Layout;


/* File: ./client_web\src\components\ProtectedRoute.jsx */
import { useContext } from "react";
import { Navigate, Outlet } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";

const ProtectedRoute = ({ allowedRoles }) => {
  const { user, loading } = useContext(AuthContext);

  console.log("ProtectedRoute user:", user);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  if (!allowedRoles.includes(user.role)) {
    return <Navigate to="/" replace />;
  }

  return <Outlet />;
};

export default ProtectedRoute;


/* File: ./client_web\src\components\RestaurantAdminAssignment.jsx */
import { useState, useEffect } from "react";
import { userServiceApi, restaurantServiceApi } from "../utils/api";
import { toast } from "react-toastify";

const RestaurantAdminAssignment = ({ restaurantId, onClose }) => {
  const [admins, setAdmins] = useState([]);
  const [newAdmin, setNewAdmin] = useState({
    name: "",
    email: "",
    phone: "",
    password: "",
    restaurantId: restaurantId
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [restaurantInfo, setRestaurantInfo] = useState(null);

  // Fetch restaurant info and admins
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch restaurant info
        const restaurantResponse = await restaurantServiceApi.get(
          `/api/restaurants/${restaurantId}`
        );
        setRestaurantInfo(restaurantResponse.data.data.restaurant);

        // Fetch admins
        const adminsResponse = await userServiceApi.get(
          `/api/users/restaurant/${restaurantId}/admins`
        );
        setAdmins(adminsResponse.data.data.admins);
      } catch (err) {
        setError("Failed to fetch data");
        console.error("Fetch error:", err);
      }
    };
    
    fetchData();
  }, [restaurantId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewAdmin(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCreateAdmin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      const response = await userServiceApi.post(
        "/api/users/restaurant-admin",
        {
          ...newAdmin,
          password: newAdmin.password || generateRandomPassword()
        }
      );

      setAdmins(prev => [...prev, response.data.data.user]);
      setNewAdmin({
        name: "",
        email: "",
        phone: "",
        password: "",
        restaurantId: restaurantId
      });
      toast.success("Restaurant admin created successfully");
    } catch (err) {
      const errorMsg = err.response?.data?.message || "Failed to create admin";
      setError(errorMsg);
      toast.error(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  const handleRemoveAdmin = async (adminId) => {
    if (!window.confirm("Are you sure you want to remove this admin?")) return;
    
    try {
      await userServiceApi.delete(`/api/users/restaurant-admin/${adminId}`);
      setAdmins(prev => prev.filter(admin => admin._id !== adminId));
      toast.success("Admin removed successfully");
    } catch (err) {
      const errorMsg = err.response?.data?.message || "Failed to remove admin";
      setError(errorMsg);
      toast.error(errorMsg);
    }
  };

  const generateRandomPassword = () => {
    return Math.random().toString(36).slice(-8);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-full max-w-2xl max-h-screen overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h2 className="text-xl font-bold">Manage Restaurant Admins</h2>
            {restaurantInfo && (
              <p className="text-sm text-gray-600">
                Restaurant: {restaurantInfo.name}
              </p>
            )}
          </div>
          <button 
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 text-2xl"
            aria-label="Close modal"
          >
            &times;
          </button>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">Create New Admin</h3>
          <form onSubmit={handleCreateAdmin} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={newAdmin.name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                  required
                />
              </div>
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={newAdmin.email}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                  required
                />
              </div>
              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                  Phone
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={newAdmin.phone}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                  required
                />
              </div>
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Password (leave blank to auto-generate)
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={newAdmin.password}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                />
              </div>
            </div>
            <div className="flex justify-end">
              <button
                type="submit"
                className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Creating...
                  </>
                ) : "Create Admin"}
              </button>
            </div>
          </form>
        </div>

        <div>
          <h3 className="text-lg font-semibold mb-2">Current Admins</h3>
          {admins.length === 0 ? (
            <p className="text-gray-500">No admins assigned to this restaurant</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Name
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Email
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Phone
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {admins.map(admin => (
                    <tr key={admin._id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {admin.name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {admin.email}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {admin.phone}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <button 
                          onClick={() => handleRemoveAdmin(admin._id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Remove
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RestaurantAdminAssignment;

/* File: ./client_web\src\components\layout\Sidebar.jsx */
import { Link, useLocation } from "react-router-dom";
import { AuthContext } from "../../context/AuthContext";
import { useContext } from "react";
import {
  MdDashboard,
  MdPeople,
  MdRestaurant,
  MdLogout,
  MdPerson,
} from "react-icons/md";

const adminLinks = [
  { name: "Dashboard", path: "/admin", icon: <MdDashboard /> },
  { name: "Users", path: "/admin/users", icon: <MdPeople /> },
  {
    name: "Restaurant Management",
    path: "/admin/restaurant-management",
    icon: <MdRestaurant />,
  },
];

const restaurantAdminLinks = [
  { name: "Dashboard", path: "/restaurant-admin", icon: <MdDashboard /> },
  { name: "Profile", path: "/restaurant-admin/profile", icon: <MdPerson /> },
];

const Sidebar = ({ role }) => {
  const location = useLocation();
  const { logout } = useContext(AuthContext);

  const links = role === "admin" ? adminLinks : restaurantAdminLinks;

  return (
    <div className="w-64 bg-gray-800 text-white h-screen fixed">
      <div className="p-4 border-b border-gray-700">
        <h1 className="text-xl font-bold">
          {role === "admin" ? "Admin Panel" : "Restaurant Admin"}
        </h1>
      </div>

      <nav className="p-4">
        <ul className="space-y-2">
          {links.map((link) => (
            <li key={link.path}>
              <Link
                to={link.path}
                className={`flex items-center p-2 rounded-lg hover:bg-gray-700 ${
                  location.pathname === link.path ? "bg-gray-700" : ""
                }`}
              >
                <span className="material-icons mr-3">{link.icon}</span>
                {link.name}
              </Link>
            </li>
          ))}
        </ul>
      </nav>

      <div className="absolute bottom-0 w-full p-4">
        <button
          onClick={logout}
          className="w-full flex items-center justify-center p-2 rounded-lg bg-red-600 hover:bg-red-700"
        >
          <span className="material-icons mr-2">logout</span>
          Logout
        </button>
      </div>
    </div>
  );
};

export default Sidebar;

/* File: ./client_web\src\components\ui\toaster.jsx */
function _optionalChain(ops) {
  let lastAccessLHS = undefined
  let value = ops[0]
  let i = 1
  while (i < ops.length) {
    const op = ops[i]
    const fn = ops[i + 1]
    i += 2
    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
      return undefined
    }
    if (op === 'access' || op === 'optionalAccess') {
      lastAccessLHS = value
      value = fn(value)
    } else if (op === 'call' || op === 'optionalCall') {
      value = fn((...args) => value.call(lastAccessLHS, ...args))
      lastAccessLHS = undefined
    }
  }
  return value
}
;('use client')

import {
  Toaster as ChakraToaster,
  Portal,
  Spinner,
  Stack,
  Toast,
  createToaster,
} from '@chakra-ui/react'

export const toaster = createToaster({
  placement: 'bottom-end',
  pauseOnPageIdle: true,
})

export const Toaster = () => {
  return (
    <Portal>
      <ChakraToaster toaster={toaster} insetInline={{ mdDown: '4' }}>
        {(toast) => (
          <Toast.Root width={{ md: 'sm' }}>
            {toast.type === 'loading' ? (
              <Spinner size='sm' color='blue.solid' />
            ) : (
              <Toast.Indicator />
            )}
            <Stack gap='1' flex='1' maxWidth='100%'>
              {toast.title && <Toast.Title>{toast.title}</Toast.Title>}
              {toast.description && (
                <Toast.Description>{toast.description}</Toast.Description>
              )}
            </Stack>
            {toast.action && (
              <Toast.ActionTrigger>{toast.action.label}</Toast.ActionTrigger>
            )}
            {_optionalChain([
              toast,
              'access',
              (_) => _.meta,
              'optionalAccess',
              (_2) => _2.closable,
            ]) && <Toast.CloseTrigger />}
          </Toast.Root>
        )}
      </ChakraToaster>
    </Portal>
  )
}


/* File: ./client_web\src\context\AuthContext.jsx */
import { createContext, useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { userServiceApi } from "../utils/api"; // Updated import to use userServiceApi

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const token = localStorage.getItem("token");
        console.log("Auth provider Token:", token);
        if (token) {
          const response = await userServiceApi.get("/api/users/me"); // Changed to use userServiceApi
          console.log("Auth check response:", response);
          if (response.status === 401 || response.status === 404) {
            logout();
          }
          setUser(response.data.data.user);
        }
      } catch (error) {
        console.error("Auth check failed:", error);
        console.log("Error response:", error.response);
        if (error.response?.status === 401 || error.response?.status === 404) {
          logout();
        }
        logout();
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (credentials) => {
    try {
      const response = await userServiceApi.post("/api/users/login", credentials); // Changed to use userServiceApi

      // Check for error in response body
      if (response.data.error) {
        throw new Error(response.data.error);
        console.log("Login error:", response.data.error);
      }

      localStorage.setItem("token", response.data.token);
      setUser(response.data.data.user);
      return { ...response.data, user: response.data.data.user };
    } catch (error) {
      throw error;
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    setUser(null);
    navigate("/login");
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

/* File: ./client_web\src\pages\NotFound.jsx */
import { Link } from "react-router-dom";

const NotFound = () => {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-6xl font-bold text-gray-800 mb-4">404</h1>
        <h2 className="text-2xl font-semibold text-gray-700 mb-6">
          Page Not Found
        </h2>
        <p className="text-gray-600 mb-8">
          The page you are looking for doesn't exist or has been moved.
        </p>
        <Link
          to="/"
          className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300"
        >
          Go Back Home
        </Link>
      </div>
    </div>
  );
};

export default NotFound;


/* File: ./client_web\src\pages\admin\Dashboard.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi, restaurantServiceApi } from '../../utils/api';
import { AuthContext } from "../../context/AuthContext";

const AdminDashboard = () => {
  const { user } = useContext(AuthContext);
  const [stats, setStats] = useState({
    users: 0,
    restaurantAdmins: 0,
    deliveryPersonnel: 0,
    pendingRequests: 0,
  });

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const [usersRes, restaurantAdminsRes, deliveryRes, pendingRes] =
          await Promise.all([
            userServiceApi.get("/api/users?role=customer"),
            userServiceApi.get("/api/users?role=restaurant_admin"),
            userServiceApi.get("/api/users?role=delivery_personnel"),
            userServiceApi.get("/api/users?status=pending"),
          ]);

        setStats({
          users: usersRes.data.results,
          restaurantAdmins: restaurantAdminsRes.data.results,
          deliveryPersonnel: deliveryRes.data.results,
          pendingRequests: pendingRes.data.results,
        });
      } catch (error) {
        console.error("Failed to fetch stats:", error);
      }
    };

    fetchStats();
  }, []);

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Admin Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold">Total Users</h3>
          <p className="text-3xl font-bold">{stats.users}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold">Restaurant Admins</h3>
          <p className="text-3xl font-bold">{stats.restaurantAdmins}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold">Delivery Personnel</h3>
          <p className="text-3xl font-bold">{stats.deliveryPersonnel}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold">Pending Requests</h3>
          <p className="text-3xl font-bold">{stats.pendingRequests}</p>
        </div>
      </div>

      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-xl font-semibold mb-4">Recent Activities</h2>
        {/* Recent activities list would go here */}
      </div>
    </div>
  );
};

export default AdminDashboard;


/* File: ./client_web\src\pages\admin\DeliveryPersonnel.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api"; // Import userServiceApi
import { AuthContext } from "../../context/AuthContext";

const AdminDeliveryPersonnel = () => {
  const { user } = useContext(AuthContext);
  const [deliveryPersons, setDeliveryPersons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDeliveryPersons = async () => {
      try {
        const response = await userServiceApi.get("/api/users?role=delivery_personnel"); // Use userServiceApi
        setDeliveryPersons(response.data.users);
      } catch (err) {
        setError(
          err.response?.data?.message || "Failed to fetch delivery personnel"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchDeliveryPersons();
  }, []);

  const approveDeliveryPerson = async (userId) => {
    try {
      await userServiceApi.patch("/api/users/delivery/approve", { userId }); // Use userServiceApi
      setDeliveryPersons(
        deliveryPersons.map((person) =>
          person._id === userId
            ? { ...person, isActive: true, status: "approved" }
            : person
        )
      );
    } catch (err) {
      setError(
        err.response?.data?.message || "Failed to approve delivery person"
      );
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Delivery Personnel Management</h1>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Phone
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Vehicle
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {deliveryPersons.map((person) => (
              <tr key={person._id}>
                <td className="px-6 py-4 whitespace-nowrap">{person.name}</td>
                <td className="px-6 py-4 whitespace-nowrap">{person.phone}</td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {person.vehicleInfo?.type} ({person.vehicleInfo?.number})
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span
                    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${
                      person.status === "approved"
                        ? "bg-green-100 text-green-800"
                        : person.status === "pending"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-red-100 text-red-800"
                    }`}
                  >
                    {person.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {!person.isActive && (
                    <button
                      onClick={() => approveDeliveryPerson(person._id)}
                      className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded text-sm"
                    >
                      Approve
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminDeliveryPersonnel;

/* File: ./client_web\src\pages\admin\RestaurantAdmins.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api"; // Import userServiceApi
import { AuthContext } from "../../context/AuthContext";

const AdminRestaurantAdmins = () => {
  const { user } = useContext(AuthContext);
  const [admins, setAdmins] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchAdmins = async () => {
      try {
        const response = await userServiceApi.get("/api/users?role=restaurant_admin");
        setAdmins(response.data.users);
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch admins");
      } finally {
        setLoading(false);
      }
    };

    fetchAdmins();
  }, []);

  const approveAdmin = async (userId, restaurantId) => {
    try {
      await userServiceApi.patch("/api/users/restaurant-admin/approve", {
        userId,
        restaurantId,
      });
      setAdmins(
        admins.map((admin) =>
          admin._id === userId
            ? { ...admin, isActive: true, status: "approved" }
            : admin
        )
      );
    } catch (err) {
      setError(err.response?.data?.message || "Failed to approve admin");
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Restaurant Admins Management</h1>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Email
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Restaurant
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {admins.map((admin) => (
              <tr key={admin._id}>
                <td className="px-6 py-4 whitespace-nowrap">{admin.name}</td>
                <td className="px-6 py-4 whitespace-nowrap">{admin.email}</td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {admin.restaurantDetails?.name || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span
                    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${
                      admin.status === "approved"
                        ? "bg-green-100 text-green-800"
                        : admin.status === "pending"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-red-100 text-red-800"
                    }`}
                  >
                    {admin.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {!admin.isActive && (
                    <button
                      onClick={() =>
                        approveAdmin(admin._id, "restaurant-id-here")
                      }
                      className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded text-sm"
                    >
                      Approve
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminRestaurantAdmins;


/* File: ./client_web\src\pages\admin\RestaurantManagement.jsx */
import RestaurantAdminAssignment from "../../components/RestaurantAdminAssignment";
import { useState, useEffect } from "react";
import { restaurantServiceApi } from "../../utils/api";
import { useNavigate } from "react-router-dom";

const RestaurantManagement = () => {
  const navigate = useNavigate();
  const [restaurants, setRestaurants] = useState([]);
  const [newRestaurant, setNewRestaurant] = useState({
    name: "",
    description: "",
    address: {
      street: "",
      city: "",
      country: "",
      geoCoordinates: {
        longitude: "",
        latitude: "",
      },
    },
    operatingHours: {
      from: "",
      to: ""
    },
    menu: [
      {
        name: "",
        description: "",
        price: "",
        category: "",
        image: null
      }
    ]
  });
  const [coverImage, setCoverImage] = useState(null);
  const [menuItemImages, setMenuItemImages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);

  const [selectedRestaurant, setSelectedRestaurant] = useState(null);
  const [showAdminModal, setShowAdminModal] = useState(false);

  // Fetch restaurants when component mounts
  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await restaurantServiceApi.get("/api/restaurants");
        if (response.data?.status === "success" && Array.isArray(response.data?.data?.restaurants)) {
          setRestaurants(response.data.data.restaurants);
        } else {
          setError("Invalid response format: Expected an array.");
        }
      } catch (err) {
        setError("Error fetching restaurants.");
      }
    };

    fetchRestaurants();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewRestaurant(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleAddressChange = (e) => {
    const { name, value } = e.target;
    setNewRestaurant(prev => ({
      ...prev,
      address: {
        ...prev.address,
        [name]: value,
      },
    }));
  };

  const handleGeoCoordinatesChange = (e) => {
    const { name, value } = e.target;
    setNewRestaurant(prev => ({
      ...prev,
      address: {
        ...prev.address,
        geoCoordinates: {
          ...prev.address.geoCoordinates,
          [name]: value,
        },
      },
    }));
  };

  const handleOperatingHoursChange = (e) => {
    const { name, value } = e.target;
    setNewRestaurant(prev => ({
      ...prev,
      operatingHours: {
        ...prev.operatingHours,
        [name]: value,
      },
    }));
  };

  const handleCoverImageChange = (e) => {
    setCoverImage(e.target.files[0]);
  };

  const handleMenuItemChange = (index, e) => {
    const { name, value } = e.target;
    const updatedMenu = [...newRestaurant.menu];
    updatedMenu[index] = {
      ...updatedMenu[index],
      [name]: value
    };
    setNewRestaurant(prev => ({
      ...prev,
      menu: updatedMenu
    }));
  };

  const handleMenuItemImageChange = (index, e) => {
    const files = e.target.files;
    if (files && files[0]) {
      const updatedImages = [...menuItemImages];
      updatedImages[index] = files[0];
      setMenuItemImages(updatedImages);
    }
  };

  const addMenuItem = () => {
    setNewRestaurant(prev => ({
      ...prev,
      menu: [
        ...prev.menu,
        {
          name: "",
          description: "",
          price: "",
          category: "",
          image: null
        }
      ]
    }));
  };

  const removeMenuItem = (index) => {
    const updatedMenu = [...newRestaurant.menu];
    updatedMenu.splice(index, 1);
    setNewRestaurant(prev => ({
      ...prev,
      menu: updatedMenu
    }));
    
    const updatedImages = [...menuItemImages];
    updatedImages.splice(index, 1);
    setMenuItemImages(updatedImages);
  };

    const handleCreateRestaurant = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
        // Validate required fields before sending
        if (!newRestaurant.name || !newRestaurant.address.geoCoordinates.longitude || !newRestaurant.address.geoCoordinates.latitude) {
        throw new Error('Name and geo coordinates are required');
        }

        const formData = new FormData();
        
        // Append basic fields
        formData.append("name", newRestaurant.name.trim());
        formData.append("description", newRestaurant.description?.trim() || '');
        
        // Append address with proper numeric conversion
        formData.append("address", JSON.stringify({
        street: newRestaurant.address.street?.trim() || '',
        city: newRestaurant.address.city?.trim() || '',
        country: newRestaurant.address.country?.trim() || '',
        geoCoordinates: {
            longitude: parseFloat(newRestaurant.address.geoCoordinates.longitude),
            latitude: parseFloat(newRestaurant.address.geoCoordinates.latitude)
        }
        }));
        
        // Append operating hours with defaults
        formData.append("operatingHours", JSON.stringify({
        from: newRestaurant.operatingHours.from || '09:00',
        to: newRestaurant.operatingHours.to || '21:00'
        }));
        
        // Process and validate menu items
        const validatedMenu = newRestaurant.menu.map(item => ({
        name: item.name?.trim() || 'Unnamed Item',
        description: item.description?.trim() || '',
        price: parseFloat(item.price) || 0,
        category: item.category?.trim() || 'other'
        }));
        
        formData.append("menu", JSON.stringify(validatedMenu));
        
        // Handle file uploads
        if (coverImage) {
        if (!coverImage.type.match('image.*')) {
            throw new Error('Cover image must be an image file');
        }
        formData.append("coverImage", coverImage);
        }

        menuItemImages.forEach((image, index) => {
        if (image) {
            if (!image.type.match('image.*')) {
            throw new Error(`Menu item image ${index + 1} must be an image file`);
            }
            formData.append("menuItemImages", image);
        }
        });

        // Debug: Log formData contents
        for (let [key, value] of formData.entries()) {
        console.log(key, typeof value === 'object' ? JSON.stringify(value) : value);
        }

        const response = await restaurantServiceApi.post("/api/restaurants", formData, {
        headers: {
            "Content-Type": "multipart/form-data",
            Authorization: `Bearer ${localStorage.getItem('token')}` // Ensure auth token is sent
        },
        timeout: 10000 // 10 second timeout
        });

        // Handle success response
        if (response.data?.status === 'success') {
        // Refresh restaurant list
        const restaurantResponse = await restaurantServiceApi.get("/api/restaurants");
        setRestaurants(restaurantResponse.data.data.restaurants);
        
        // Reset form
        setNewRestaurant({
            name: "",
            description: "",
            address: {
            street: "",
            city: "",
            country: "",
            geoCoordinates: {
                longitude: "",
                latitude: "",
            },
            },
            operatingHours: {
            from: "",
            to: ""
            },
            menu: [
            {
                name: "",
                description: "",
                price: "",
                category: "",
                image: null
            }
            ]
        });
        setCoverImage(null);
        setMenuItemImages([]);
        setShowModal(false);
        }
    } catch (err) {
        console.error("Error creating restaurant:", err);
        setError(err.response?.data?.message || 
                err.message || 
                "Error creating restaurant. Please check your inputs and try again.");
    } finally {
        setLoading(false);
    }
    };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Restaurant Management</h1>

      {error && <div className="text-red-500 mb-4">{error}</div>}

      <button
        className="btn-primary mb-6"
        onClick={() => setShowModal(true)}
      >
        Create Restaurant
      </button>

      {showModal && (
        <div className="fixed inset-0 flex justify-center items-center bg-gray-500 bg-opacity-50 z-50">
          <div className="bg-white p-6 rounded-lg w-1/2 max-h-screen overflow-y-auto">
            <h2 className="text-xl font-semibold mb-4">Create New Restaurant</h2>
            <form onSubmit={handleCreateRestaurant} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Restaurant Name</label>
                <input
                  type="text"
                  name="name"
                  value={newRestaurant.name}
                  onChange={handleChange}
                  className="input-field"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Description</label>
                <input
                  type="text"
                  name="description"
                  value={newRestaurant.description}
                  onChange={handleChange}
                  className="input-field"
                  required
                />
              </div>

              <div className="border p-4 rounded">
                <h3 className="text-lg font-semibold mb-2">Address</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Street</label>
                    <input
                      type="text"
                      name="street"
                      value={newRestaurant.address.street}
                      onChange={handleAddressChange}
                      className="input-field"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">City</label>
                    <input
                      type="text"
                      name="city"
                      value={newRestaurant.address.city}
                      onChange={handleAddressChange}
                      className="input-field"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Country</label>
                    <input
                      type="text"
                      name="country"
                      value={newRestaurant.address.country}
                      onChange={handleAddressChange}
                      className="input-field"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Longitude</label>
                    <input
                      type="number"
                      name="longitude"
                      value={newRestaurant.address.geoCoordinates.longitude}
                      onChange={handleGeoCoordinatesChange}
                      step="any"
                      className="input-field"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Latitude</label>
                    <input
                      type="number"
                      name="latitude"
                      value={newRestaurant.address.geoCoordinates.latitude}
                      onChange={handleGeoCoordinatesChange}
                      step="any"
                      className="input-field"
                      required
                    />
                  </div>
                </div>
              </div>

              <div className="border p-4 rounded">
                <h3 className="text-lg font-semibold mb-2">Operating Hours</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">From</label>
                    <input
                      type="time"
                      name="from"
                      value={newRestaurant.operatingHours.from}
                      onChange={handleOperatingHoursChange}
                      className="input-field"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">To</label>
                    <input
                      type="time"
                      name="to"
                      value={newRestaurant.operatingHours.to}
                      onChange={handleOperatingHoursChange}
                      className="input-field"
                      required
                    />
                  </div>
                </div>
              </div>

              <div className="border p-4 rounded">
                <div className="flex justify-between items-center mb-2">
                  <h3 className="text-lg font-semibold">Menu Items</h3>
                  <button
                    type="button"
                    onClick={addMenuItem}
                    className="btn-secondary"
                  >
                    Add Menu Item
                  </button>
                </div>

                {newRestaurant.menu.map((item, index) => (
                  <div key={index} className="border p-4 mb-4 rounded">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium">Menu Item #{index + 1}</h4>
                      <button
                        type="button"
                        onClick={() => removeMenuItem(index)}
                        className="text-red-500 text-sm"
                      >
                        Remove
                      </button>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Name</label>
                        <input
                          type="text"
                          name="name"
                          value={item.name}
                          onChange={(e) => handleMenuItemChange(index, e)}
                          className="input-field"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Category</label>
                        <input
                          type="text"
                          name="category"
                          value={item.category}
                          onChange={(e) => handleMenuItemChange(index, e)}
                          className="input-field"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Price</label>
                        <input
                          type="number"
                          name="price"
                          value={item.price}
                          onChange={(e) => handleMenuItemChange(index, e)}
                          className="input-field"
                          step="0.01"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Description</label>
                        <input
                          type="text"
                          name="description"
                          value={item.description}
                          onChange={(e) => handleMenuItemChange(index, e)}
                          className="input-field"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">Image</label>
                        <input
                          type="file"
                          onChange={(e) => handleMenuItemImageChange(index, e)}
                          className="input-field"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700">
                  Cover Image
                </label>
                <input
                  type="file"
                  onChange={handleCoverImageChange}
                  className="input-field"
                />
              </div>

              <div className="flex justify-end space-x-4">
                <button
                  type="button"
                  onClick={() => setShowModal(false)}
                  className="btn-secondary"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="btn-primary"
                  disabled={loading}
                >
                  {loading ? "Creating..." : "Create Restaurant"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      <h2 className="text-xl font-semibold mb-4">All Restaurants</h2>
      <div className="overflow-x-auto">
        <table className="min-w-full table-auto">
          <thead className="bg-gray-100">
            <tr>
              <th className="px-4 py-2 text-left">Name</th>
              <th className="px-4 py-2 text-left">Description</th>
              <th className="px-4 py-2 text-left">Address</th>
              <th className="px-4 py-2 text-left">Operating Hours</th>
              <th className="px-4 py-2 text-left">Menu Items</th>
              <th className="px-4 py-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {restaurants.map((restaurant) => (
              <tr key={restaurant._id} className="border-b">
                <td className="px-4 py-2">{restaurant.name}</td>
                <td className="px-4 py-2">{restaurant.description}</td>
                <td className="px-4 py-2">
                  {restaurant.address?.street}, {restaurant.address?.city}, {restaurant.address?.country}
                </td>
                <td className="px-4 py-2">
                  {restaurant.operatingHours?.from} - {restaurant.operatingHours?.to}
                </td>
                <td className="px-4 py-2">
                  {restaurant.menu?.length || 0} items
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                    onClick={() => {
                    setSelectedRestaurant(restaurant._id);
                    setShowAdminModal(true);
                    }}
                    className="text-blue-600 hover:text-blue-900 mr-4"
                >
                    Manage Admins
                </button>
                <button className="text-yellow-600 hover:text-yellow-900 mr-4">
                    Edit
                </button>
                <button className="text-red-600 hover:text-red-900">
                    Delete
                </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {showAdminModal && (
                <RestaurantAdminAssignment 
                  restaurantId={selectedRestaurant}
                  onClose={() => setShowAdminModal(false)}
                />
        )}
    </div>
  );
};

export default RestaurantManagement;

/* File: ./client_web\src\pages\admin\Users.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api";
import { AuthContext } from "../../context/AuthContext";

const AdminUsers = () => {
  const { user } = useContext(AuthContext);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [activeTab, setActiveTab] = useState("all"); // 'all', 'customer', 'admin', 'restaurant_admin', 'delivery_personnel', 'inactive'

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await userServiceApi.get("/api/users");
        setUsers(response.data.data.users);
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch users");
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  const toggleUserStatus = async (userId, isActive, userRole, currentStatus) => {
    try {
      let updateData = { isActive: !isActive };
      
      // Special handling for delivery personnel
      if (userRole === 'delivery_personnel') {
        if (!isActive) {
          // Activating delivery personnel
          updateData.status = 'approved';
        } else {
          // Deactivating delivery personnel
          updateData.status = 'rejected';
        }
      } else {
        // For other user types
        updateData.status = !isActive ? 'active' : 'inactive';
      }
  
      await userServiceApi.patch(`/api/users/${userId}`, updateData);
      
      setUsers(
        users.map((user) =>
          user._id === userId ? { 
            ...user, 
            isActive: !isActive,
            status: updateData.status 
          } : user
        )
      );
    } catch (err) {
      setError(err.response?.data?.message || "Failed to update user status");
    }
  };

  const filteredUsers = users.filter((user) => {
    // First filter by search term
    const matchesSearch = 
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (user.phone && user.phone.toLowerCase().includes(searchTerm.toLowerCase()));
    
    // Then filter by active tab
    switch (activeTab) {
      case 'customer':
        return matchesSearch && user.role === 'customer' && user.isActive;
      case 'admin':
        return matchesSearch && user.role === 'admin' && user.isActive;
      case 'restaurant_admin':
        return matchesSearch && user.role === 'restaurant_admin' && user.isActive;
      case 'delivery_personnel':
        return matchesSearch && user.role === 'delivery_personnel' && user.isActive;
      case 'inactive':
        return matchesSearch && !user.isActive;
      default:
        return matchesSearch;
    }
  });

  const getRoleBadgeColor = (role) => {
    switch (role) {
      case 'admin':
        return 'bg-purple-100 text-purple-800';
      case 'restaurant_admin':
        return 'bg-yellow-100 text-yellow-800';
      case 'delivery_personnel':
        return 'bg-blue-100 text-blue-800';
      case 'customer':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">User Management</h1>

      <div className="mb-6">
        <input
          type="text"
          placeholder="Search users..."
          className="border border-gray-300 rounded-md px-4 py-2 w-full md:w-1/2"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>

      {/* Role-based tabs */}
      <div className="mb-6 border-b border-gray-200">
        <nav className="-mb-px flex space-x-4 overflow-x-auto">
          <button
            onClick={() => setActiveTab('all')}
            className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'all'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            All Users
          </button>
          <button
            onClick={() => setActiveTab('customer')}
            className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'customer'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Customers
          </button>
          <button
            onClick={() => setActiveTab('admin')}
            className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'admin'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            System Admins
          </button>
          <button
            onClick={() => setActiveTab('restaurant_admin')}
            className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'restaurant_admin'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Restaurant Admins
          </button>
          <button
            onClick={() => setActiveTab('delivery_personnel')}
            className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'delivery_personnel'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Delivery Personnel
          </button>
          <button
            onClick={() => setActiveTab('inactive')}
            className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'inactive'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Inactive Users
          </button>
        </nav>
      </div>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Email
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Phone
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Role
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredUsers.length > 0 ? (
              filteredUsers.map((user) => (
                <tr key={user._id}>
                  <td className="px-6 py-4 whitespace-nowrap">{user.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{user.email}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{user.phone || 'N/A'}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadgeColor(user.role)}`}>
                      {user.role ? user.role.replace(/_/g, ' ') : 'customer'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span
                      className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      ${
                        user.isActive
                          ? "bg-green-100 text-green-800"
                          : "bg-red-100 text-red-800"
                      }`}
                    >
                      {user.isActive ? "Active" : "Inactive"}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                  <button
                    onClick={() => toggleUserStatus(user._id, user.isActive, user.role, user.status)}
                    className={`mr-2 px-3 py-1 rounded text-sm font-medium 
                      ${
                        user.isActive
                          ? "bg-red-500 hover:bg-red-600 text-white"
                          : "bg-green-500 hover:bg-green-600 text-white"
                      }`}
                  >
                    {user.isActive ? "Deactivate" : "Activate"}
                  </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="6" className="px-6 py-4 text-center text-gray-500">
                  No users found matching your criteria
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminUsers;

/* File: ./client_web\src\pages\Auth\Login.jsx */
import { useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../../context/AuthContext";

const Login = () => {
  const [credentials, setCredentials] = useState({
    email: "",
    phone: "",
    password: "",
  });
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setCredentials({
      ...credentials,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const { email, phone, password } = credentials;
      const response = await login({ email, phone, password });

      // Redirect based on role
      if (response.user.role === "admin") {
        navigate("/admin");
      } else if (response.user.role === "restaurant_admin") {
        navigate("/restaurant-admin");
      } else {
        navigate("/");
      }
    } catch (err) {
      setError(err.response?.data?.message || "Login failed");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
            {error}
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm space-y-4">
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={credentials.email}
                onChange={handleChange}
              />
            </div>

            <div className="text-center">OR</div>

            <div>
              <label
                htmlFor="phone"
                className="block text-sm font-medium text-gray-700"
              >
                Phone number
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={credentials.phone}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-gray-700"
              >
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                autoComplete="current-password"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={credentials.password}
                onChange={handleChange}
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label
                htmlFor="remember-me"
                className="ml-2 block text-sm text-gray-900"
              >
                Remember me
              </label>
            </div>

            <div className="text-sm">
              <a
                href="#"
                className="font-medium text-blue-600 hover:text-blue-500"
              >
                Forgot your password?
              </a>
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? "Signing in..." : "Sign in"}
            </button>
          </div>
        </form>

        <div className="text-center text-sm">
          <p>
            Need restaurant admin access?{" "}
            <a
              href="/restaurant-admin/request"
              className="font-medium text-blue-600 hover:text-blue-500"
            >
              Request access
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;


/* File: ./client_web\src\pages\Auth\RestaurantAdminRequest.jsx */
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import {userServiceApi, restaurantServiceApi} from "../../utils/api";

const RestaurantAdminRequest = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    restaurantName: "",
    licenseNumber: "",
    address: "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      await userServiceApi.post("/api/users/restaurant-admin/request", formData);
      setSuccess(true);
      setTimeout(() => navigate("/login"), 3000);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to submit request");
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full text-center">
          <h2 className="text-2xl font-bold mb-4 text-green-600">
            Request Submitted!
          </h2>
          <p className="mb-6">
            Your restaurant admin request has been submitted for approval.
            You'll be notified once it's processed.
          </p>
          <p>Redirecting to login page...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-md">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Restaurant Admin Request
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Fill out the form to request restaurant admin access
          </p>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
            {error}
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm space-y-4">
            <div>
              <label
                htmlFor="name"
                className="block text-sm font-medium text-gray-700"
              >
                Full Name
              </label>
              <input
                id="name"
                name="name"
                type="text"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.name}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                Email Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.email}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="phone"
                className="block text-sm font-medium text-gray-700"
              >
                Phone Number
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.phone}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="restaurantName"
                className="block text-sm font-medium text-gray-700"
              >
                Restaurant Name
              </label>
              <input
                id="restaurantName"
                name="restaurantName"
                type="text"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.restaurantName}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="licenseNumber"
                className="block text-sm font-medium text-gray-700"
              >
                License Number
              </label>
              <input
                id="licenseNumber"
                name="licenseNumber"
                type="text"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.licenseNumber}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="address"
                className="block text-sm font-medium text-gray-700"
              >
                Restaurant Address
              </label>
              <textarea
                id="address"
                name="address"
                rows="3"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.address}
                onChange={handleChange}
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? "Submitting..." : "Submit Request"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RestaurantAdminRequest;


/* File: ./client_web\src\pages\restaurant-admin\Dashboard.jsx */
import { useContext, useEffect, useState } from "react";
import { restaurantServiceApi } from "../../utils/api";
import { AuthContext } from "../../context/AuthContext";
import { toast } from "react-toastify";
import { MdEdit, MdDelete, MdAddPhotoAlternate, MdImage } from "react-icons/md";

const RestaurantAdminDashboard = () => {
  const { user } = useContext(AuthContext);
  const [restaurant, setRestaurant] = useState(null);
  const [menuItems, setMenuItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [newMenuItem, setNewMenuItem] = useState({
    name: "",
    description: "",
    price: "",
    category: "main",
    image: null
  });
  const [editMode, setEditMode] = useState(false);
  const [currentItemId, setCurrentItemId] = useState(null);
  const [stats, setStats] = useState({
    totalItems: 0,
    popularCategory: "",
    averagePrice: 0
  });

  // API base URL
  const API_BASE_URL = "http://localhost:3001"; // Adjust this to your actual API base URL

  // Fetch restaurant and menu data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // Fetch restaurant details
        const restaurantRes = await restaurantServiceApi.get(
          `/api/restaurants/${user.restaurantId}`
        );
        setRestaurant(restaurantRes.data.data);
        
        // Set menu items from restaurant data
        if (restaurantRes.data.data?.menu) {
          setMenuItems(restaurantRes.data.data.menu);
          calculateStats(restaurantRes.data.data.menu);
        }
        
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch data");
        toast.error("Failed to load restaurant data");
      } finally {
        setLoading(false);
      }
    };

    if (user?.restaurantId) {
      fetchData();
    }
  }, [user]);

  const calculateStats = (items) => {
    if (!items || items.length === 0) return;
    
    // Calculate total items
    const totalItems = items.length;
    
    // Find popular category
    const categoryCount = {};
    items.forEach(item => {
      categoryCount[item.category] = (categoryCount[item.category] || 0) + 1;
    });
    const popularCategory = Object.keys(categoryCount).reduce((a, b) => 
      categoryCount[a] > categoryCount[b] ? a : b
    );
    
    // Calculate average price
    const totalPrice = items.reduce((sum, item) => sum + item.price, 0);
    const averagePrice = totalPrice / items.length;
    
    setStats({
      totalItems,
      popularCategory,
      averagePrice: parseFloat(averagePrice.toFixed(2))
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewMenuItem(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleImageChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setNewMenuItem(prev => ({
        ...prev,
        image: e.target.files[0]
      }));
    }
  };

  // Add new menu item
  const handleAddMenuItem = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      
      // Append menu item data
      formData.append("name", newMenuItem.name);
      formData.append("description", newMenuItem.description);
      formData.append("price", newMenuItem.price);
      formData.append("category", newMenuItem.category);
      
      if (newMenuItem.image) {
        formData.append("menuItemImage", newMenuItem.image);
      }

      const response = await restaurantServiceApi.post(
        `/api/restaurants/${user.restaurantId}/menu`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          }
        }
      );

      if (response.data.status === "success") {
        setMenuItems(prev => [...prev, response.data.data.menuItem]);
        setNewMenuItem({
          name: "",
          description: "",
          price: "",
          category: "main",
          image: null
        });
        toast.success("Menu item added successfully");
      } else {
        throw new Error(response.data.message || "Failed to add menu item");
      }
    } catch (err) {
      console.error("Full error details:", err);
      console.error("Error response data:", err.response?.data);
      toast.error(
        err.response?.data?.message || 
        err.response?.data?.error || 
        err.message || 
        "Failed to add menu item"
      );
    }
  };

  const handleEditMenuItem = (item) => {
    setEditMode(true);
    setCurrentItemId(item._id);
    setNewMenuItem({
      name: item.name,
      description: item.description,
      price: item.price.toString(),
      category: item.category,
      image: null
    });
  };

  // Update menu item
  const handleUpdateMenuItem = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      
      // Append menu item data
      formData.append("name", newMenuItem.name);
      formData.append("description", newMenuItem.description);
      formData.append("price", newMenuItem.price);
      formData.append("category", newMenuItem.category);
      
      if (newMenuItem.image) {
        formData.append("menuItemImage", newMenuItem.image);
      }

      const response = await restaurantServiceApi.put(
        `/api/restaurants/${user.restaurantId}/menu/${currentItemId}`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        }
      );
      
      const updatedItems = menuItems.map(item => 
        item._id === currentItemId ? response.data.data.menuItem : item
      );
      setMenuItems(updatedItems);
      calculateStats(updatedItems);
      setEditMode(false);
      setNewMenuItem({
        name: "",
        description: "",
        price: "",
        category: "main",
        image: null
      });
      toast.success("Menu item updated successfully");
    } catch (err) {
      toast.error(err.response?.data?.message || "Failed to update menu item");
    }
  };

  // Delete menu item
  const handleDeleteMenuItem = async (itemId) => {
    if (!window.confirm("Are you sure you want to delete this menu item?")) return;
    
    try {
      await restaurantServiceApi.delete(
        `/api/restaurants/${user.restaurantId}/menu/${itemId}`
      );
      
      const updatedItems = menuItems.filter(item => item._id !== itemId);
      setMenuItems(updatedItems);
      calculateStats(updatedItems);
      toast.success("Menu item deleted successfully");
    } catch (err) {
      toast.error(err.response?.data?.message || "Failed to delete menu item");
    }
  };

  // Function to get the image URL
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    // Check if the image path already includes the base URL
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    
    // Ensure the path doesn't start with a slash if it's already in the image path
    const path = imagePath.startsWith('/') ? imagePath : `/${imagePath}`;
    return `${API_BASE_URL}${path}`;
  };

  if (loading) return <div className="p-6">Loading...</div>;
  if (error) return <div className="p-6 text-red-500">{error}</div>;
  if (!restaurant) return <div className="p-6">No restaurant data found</div>;

  return (
    <div className="p-4 max-w-full">
      <h1 className="text-2xl font-bold mb-6">
        {restaurant.name} - Dashboard
      </h1>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold">Total Menu Items</h3>
          <p className="text-3xl font-bold">{stats.totalItems}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold">Popular Category</h3>
          <p className="text-3xl font-bold capitalize">{stats.popularCategory || "N/A"}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold">Average Price</h3>
          <p className="text-3xl font-bold">{`LKR ${stats.averagePrice.toFixed(2)}`}</p>
        </div>
      </div>

      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-xl font-semibold mb-4">
          {editMode ? "Edit Menu Item" : "Add New Menu Item"}
        </h2>
        <form onSubmit={editMode ? handleUpdateMenuItem : handleAddMenuItem} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Name</label>
              <input
                type="text"
                name="name"
                value={newMenuItem.name}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Category</label>
              <select
                name="category"
                value={newMenuItem.category}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              >
                <option value="appetizer">Appetizer</option>
                <option value="main">Main Course</option>
                <option value="dessert">Dessert</option>
                <option value="beverage">Beverage</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Price</label>
              <input
                type="number"
                name="price"
                value={newMenuItem.price}
                onChange={handleInputChange}
                step="0.01"
                min="0"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Description</label>
              <input
                type="text"
                name="description"
                value={newMenuItem.description}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700">
                {editMode ? "Update Image (leave blank to keep current)" : "Image"}
              </label>
              <div className="mt-1 flex items-center">
                <label className="cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  <span className="flex items-center">
                    <MdAddPhotoAlternate className="mr-2" />
                    {newMenuItem.image ? newMenuItem.image.name : "Choose File"}
                  </span>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="sr-only"
                  />
                </label>
              </div>
            </div>
          </div>
          <div className="flex justify-end space-x-4">
            {editMode && (
              <button
                type="button"
                onClick={() => {
                  setEditMode(false);
                  setNewMenuItem({
                    name: "",
                    description: "",
                    price: "",
                    category: "main",
                    image: null
                  });
                }}
                className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
              >
                Cancel
              </button>
            )}
            <button
              type="submit"
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
            >
              {editMode ? "Update Item" : "Add Item"}
            </button>
          </div>
        </form>
      </div>

      <div className="bg-white p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold mb-4">Current Menu</h2>
        {menuItems.length === 0 ? (
          <p className="text-gray-500">No menu items added yet</p>
        ) : (
          <div className="w-full overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Image
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Name
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Category
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Price
                    </th>
                    <th className="hidden md:table-cell px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Description
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {menuItems.map((item) => (
                    <tr key={item._id}>
                      <td className="px-4 py-4 whitespace-nowrap">
                        {item.image ? (
                          <img 
                            src={getImageUrl(item.image)} 
                            alt={item.name}
                            className="h-10 w-10 rounded-full object-cover"
                            onError={(e) => {
                              console.log('Image failed to load:', item.image);
                              e.target.onerror = null;
                              e.target.src = ''; // Fallback to placeholder
                              e.target.classList.add('bg-gray-200');
                            }}
                          />
                        ) : (
                          <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                            <MdImage className="text-gray-400 text-xl" />
                          </div>
                        )}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm">{item.name}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm capitalize">{item.category}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm">{`LKR ${item.price.toFixed(2)}`}</td>
                      <td className="hidden md:table-cell px-4 py-4 text-sm">
                        <div className="max-w-xs truncate">{item.description || "-"}</div>
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm">
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleEditMenuItem(item)}
                            className="text-blue-600 hover:text-blue-900 flex items-center"
                            title="Edit"
                          >
                            <MdEdit className="mr-1" /> 
                            <span className="hidden sm:inline">Edit</span>
                          </button>
                          <button
                            onClick={() => handleDeleteMenuItem(item._id)}
                            className="text-red-600 hover:text-red-900 flex items-center"
                            title="Delete"
                          >
                            <MdDelete className="mr-1" /> 
                            <span className="hidden sm:inline">Delete</span>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default RestaurantAdminDashboard;

/* File: ./client_web\src\pages\restaurant-admin\Profile.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api";
import { AuthContext } from "../../context/AuthContext";

const RestaurantAdminProfile = () => {
  const { user } = useContext(AuthContext);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
  });

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const response = await userServiceApi.get("api/users/me");
        console.log("Full API Response:", response); // Debug log
        
        // Handle nested response structure
        const userData = response.data?.data?.user || response.data?.user || response.data;
        
        if (!userData) {
          throw new Error("User data not found in response");
        }

        console.log("Extracted User Data:", userData); // Debug log
        
        setProfile(userData);
        setFormData({
          name: userData.name || "",
          email: userData.email || "",
          phone: userData.phone || "",
          address: userData.address || "",
        });
      } catch (err) {
        console.error("Profile fetch error:", err);
        setError(err.response?.data?.message || err.message || "Failed to fetch profile");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, []);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await userServiceApi.patch("api/users/update-me", formData);
      const updatedUser = response.data?.data?.user || response.data?.user || response.data;
      setProfile(updatedUser);
      setEditMode(false);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to update profile");
    }
  };

  if (loading) return <div className="p-6">Loading profile...</div>;
  if (error) return <div className="p-6 text-red-500">Error: {error}</div>;
  if (!profile) return <div className="p-6">No profile data available</div>;

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Profile</h1>
        {!editMode && (
          <button
            onClick={() => setEditMode(true)}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            Edit Profile
          </button>
        )}
      </div>

      {editMode ? (
        <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Name
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
                required
                disabled
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Phone
              </label>
              <input
                type="tel"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Address
              </label>
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
              />
            </div>
          </div>

          <div className="flex space-x-4">
            <button
              type="submit"
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
            >
              Save Changes
            </button>
            <button
              type="button"
              onClick={() => setEditMode(false)}
              className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
            >
              Cancel
            </button>
          </div>
        </form>
      ) : (
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Name</h3>
              <p className="mt-1 text-sm text-gray-900">{profile.name || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Email</h3>
              <p className="mt-1 text-sm text-gray-900">{profile.email || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Phone</h3>
              <p className="mt-1 text-sm text-gray-900">{profile.phone || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Restaurant</h3>
              <p className="mt-1 text-sm text-gray-900">
                {profile.restaurantId || "N/A"}
              </p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Address</h3>
              <p className="mt-1 text-sm text-gray-900">
                {profile.address || "N/A"}
              </p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Status</h3>
              <p className="mt-1 text-sm text-gray-900">
                <span
                  className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                  ${
                    profile.isActive
                      ? "bg-green-100 text-green-800"
                      : "bg-red-100 text-red-800"
                  }`}
                >
                  {profile.isActive ? "Active" : "Inactive"}
                </span>
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RestaurantAdminProfile;

/* File: ./client_web\src\utils\api.jsx */
import axios from "axios";

// Create an axios instance for user service (running on port 3000)
const userServiceApi = axios.create({
  baseURL: "http://localhost:3000", // User service running on port 3000
});

// Create an axios instance for restaurant service (running on port 3001)
const restaurantServiceApi = axios.create({
  baseURL: "http://localhost:3001", // Restaurant service running on port 3001
});

// Add a request interceptor to include the token for both services
const addAuthToken = (config) => {
  const token = localStorage.getItem("token");
  console.log("[INTERCEPTOR] Sending token:", token);

  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
};

// Interceptor for User Service API
userServiceApi.interceptors.request.use(
  addAuthToken,
  (error) => Promise.reject(error)
);

// Interceptor for Restaurant Service API
restaurantServiceApi.interceptors.request.use(
  addAuthToken,
  (error) => Promise.reject(error)
);

// Add a response interceptor (Optional): Can be used to handle token expiration or error logging
const handleResponseError = (error) => {
  if (error.response && error.response.status === 401) {
    console.error("Unauthorized request. Please login again.");
  }
  return Promise.reject(error);
};

// Add response interceptors for both services
userServiceApi.interceptors.response.use(
  (response) => response,
  handleResponseError
);

restaurantServiceApi.interceptors.response.use(
  (response) => response,
  handleResponseError
);

// Export the instances to use for different services
export { userServiceApi, restaurantServiceApi };
