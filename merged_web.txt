
/* File: ./client_web\eslint.config.js */
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]


/* File: ./client_web\vite.config.js */

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    port: 5199,
  },
});



/* File: ./client_web\src\App.css */
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

/* In your index.css or App.css */
.leaflet-container {
  width: 100%;
  height: 100%;
  z-index: 1;
}

.leaflet-control-attribution {
  font-size: 9px;
}


/* File: ./client_web\src\App.jsx */
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import Layout from "./components/Layout";
import Login from "./pages/Auth/Login";
import RestaurantAdminRequest from "./pages/Auth/RestaurantAdminRequest";
import AdminDashboard from "./pages/admin/Dashboard";
import AdminUsers from "./pages/admin/Users";
import AdminRestaurantAdmins from "./pages/admin/RestaurantAdmins";
import RestaurantManagement from "./pages/admin/RestaurantManagement";
import OrderManagement from "./pages/admin/OrderManagement";
import RestaurantAdminDashboard from "./pages/restaurant-admin/Dashboard";
import RestaurantAdminProfile from "./pages/restaurant-admin/Profile";
import NotFound from "./pages/NotFound";
import ProtectedRoute from "./components/ProtectedRoute";

function App() {
  return (
    <Router>
      <AuthProvider>
        <Routes>
          {/* Public routes */}
          <Route path="/login" element={<Login />} />
          <Route
            path="/restaurant-admin/request"
            element={<RestaurantAdminRequest />}
          />

          {/* Admin routes */}
          <Route
            path="/admin"
            element={<ProtectedRoute allowedRoles={["admin"]} />}
          >
            <Route element={<Layout role="admin" />}>
              <Route index element={<AdminDashboard />} />
              <Route path="users" element={<AdminUsers />} />
              <Route
                path="restaurant-admins"
                element={<AdminRestaurantAdmins />}
              />
              <Route
                path="restaurant-management"
                element={<RestaurantManagement />}
              />

              <Route path="orders" 
              element={<OrderManagement />}
              />

            </Route>
          </Route>

          {/* Restaurant admin routes */}
          <Route
            path="/restaurant-admin"
            element={<ProtectedRoute allowedRoles={["restaurant_admin"]} />}
          >
            <Route element={<Layout role="restaurant_admin" />}>
              <Route index element={<RestaurantAdminDashboard />} />
              <Route path="profile" element={<RestaurantAdminProfile />} />
            </Route>
          </Route>

          {/* 404 */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </AuthProvider>
    </Router>
  );
}

export default App;



/* File: ./client_web\src\index.css */

@import "tailwindcss";


/* File: ./client_web\src\main.jsx */

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



/* File: ./client_web\src\components\Layout.jsx */
import { Outlet } from "react-router-dom";
import Sidebar from "./layout/Sidebar";

const Layout = ({ role }) => {
  return (
    <div className="flex">
      <Sidebar role={role} />
      <div className="flex-1 ml-64 p-6">
        <Outlet />
      </div>
    </div>
  );
};

export default Layout;


/* File: ./client_web\src\components\ProtectedRoute.jsx */
import { useContext } from "react";
import { Navigate, Outlet } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";

const ProtectedRoute = ({ allowedRoles }) => {
  const { user, loading } = useContext(AuthContext);

  console.log("ProtectedRoute user:", user);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  if (!allowedRoles.includes(user.role)) {
    return <Navigate to="/" replace />;
  }

  return <Outlet />;
};

export default ProtectedRoute;


/* File: ./client_web\src\components\RestaurantAdminAssignment.jsx */
import { useState, useEffect } from "react";
import { userServiceApi, restaurantServiceApi } from "../utils/api";
import { toast } from "react-toastify";

const RestaurantAdminAssignment = ({ restaurantId, onClose }) => {
  const [admins, setAdmins] = useState([]);
  const [newAdmin, setNewAdmin] = useState({
    name: "",
    email: "",
    phone: "",
    password: "",
    restaurantId: restaurantId
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [restaurantInfo, setRestaurantInfo] = useState(null);

  // Fetch restaurant info and admins
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch restaurant info
        const restaurantResponse = await restaurantServiceApi.get(
          `/api/restaurants/${restaurantId}`
        );
        setRestaurantInfo(restaurantResponse.data.data.restaurant);

        // Fetch admins
        const adminsResponse = await userServiceApi.get(
          `/api/users/restaurant/${restaurantId}/admins`
        );
        setAdmins(adminsResponse.data.data.admins);
      } catch (err) {
        setError("Failed to fetch data");
        console.error("Fetch error:", err);
      }
    };
    
    fetchData();
  }, [restaurantId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewAdmin(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCreateAdmin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      const response = await userServiceApi.post(
        "/api/users/restaurant-admin",
        {
          ...newAdmin,
          password: newAdmin.password || generateRandomPassword()
        }
      );

      setAdmins(prev => [...prev, response.data.data.user]);
      setNewAdmin({
        name: "",
        email: "",
        phone: "",
        password: "",
        restaurantId: restaurantId
      });
      toast.success("Restaurant admin created successfully");
    } catch (err) {
      const errorMsg = err.response?.data?.message || "Failed to create admin";
      setError(errorMsg);
      toast.error(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  const handleRemoveAdmin = async (adminId) => {
    if (!window.confirm("Are you sure you want to remove this admin?")) return;
    
    try {
      await userServiceApi.delete(`/api/users/restaurant-admin/${adminId}`);
      setAdmins(prev => prev.filter(admin => admin._id !== adminId));
      toast.success("Admin removed successfully");
    } catch (err) {
      const errorMsg = err.response?.data?.message || "Failed to remove admin";
      setError(errorMsg);
      toast.error(errorMsg);
    }
  };

  const generateRandomPassword = () => {
    return Math.random().toString(36).slice(-8);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-full max-w-2xl max-h-screen overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h2 className="text-xl font-bold">Manage Restaurant Admins</h2>
            {restaurantInfo && (
              <p className="text-sm text-gray-600">
                Restaurant: {restaurantInfo.name}
              </p>
            )}
          </div>
          <button 
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 text-2xl"
            aria-label="Close modal"
          >
            &times;
          </button>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">Create New Admin</h3>
          <form onSubmit={handleCreateAdmin} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={newAdmin.name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                  required
                />
              </div>
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={newAdmin.email}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                  required
                />
              </div>
              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                  Phone
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={newAdmin.phone}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                  required
                />
              </div>
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Password (leave blank to auto-generate)
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={newAdmin.password}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 border"
                />
              </div>
            </div>
            <div className="flex justify-end">
              <button
                type="submit"
                className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Creating...
                  </>
                ) : "Create Admin"}
              </button>
            </div>
          </form>
        </div>

        <div>
          <h3 className="text-lg font-semibold mb-2">Current Admins</h3>
          {admins.length === 0 ? (
            <p className="text-gray-500">No admins assigned to this restaurant</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Name
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Email
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Phone
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {admins.map(admin => (
                    <tr key={admin._id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {admin.name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {admin.email}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {admin.phone}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <button 
                          onClick={() => handleRemoveAdmin(admin._id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Remove
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RestaurantAdminAssignment;

/* File: ./client_web\src\components\layout\Sidebar.jsx */
import { Link, useLocation } from "react-router-dom";
import { AuthContext } from "../../context/AuthContext";
import { useContext } from "react";
import {
  MdDashboard,
  MdPeople,
  MdRestaurant,
  MdShoppingCart,
  MdLogout,
  MdPerson,
} from "react-icons/md";

const adminLinks = [
  { name: "Dashboard", path: "/admin", icon: <MdDashboard /> },
  { name: "Users", path: "/admin/users", icon: <MdPeople /> },
  {
    name: "Restaurant Management",
    path: "/admin/restaurant-management",
    icon: <MdRestaurant />,
  },
  {
    name: "Orders",
    path: "/admin/orders",
    icon: <MdShoppingCart />,
  },
];

const restaurantAdminLinks = [
  { name: "Dashboard", path: "/restaurant-admin", icon: <MdDashboard /> },
  { name: "Profile", path: "/restaurant-admin/profile", icon: <MdPerson /> },
];

const Sidebar = ({ role }) => {
  const location = useLocation();
  const { logout } = useContext(AuthContext);

  const links = role === "admin" ? adminLinks : restaurantAdminLinks;

  return (
    <div className="w-64 bg-gray-800 text-white h-screen fixed">
      {/* Role-specific Header */}
      <div className="p-4 border-b border-gray-700">
        <h1 className="text-xl font-bold">
          {role === "admin" ? "Admin Panel" : "Restaurant Admin"}
        </h1>
      </div>

      {/* Links */}
      <nav className="p-4">
        <ul className="space-y-2">
          {links.map((link) => (
            <li key={link.path}>
              <Link
                to={link.path}
                className={`flex items-center p-2 rounded-lg hover:bg-gray-700 ${
                  location.pathname === link.path ? "bg-gray-700" : ""
                }`}
              >
                <span className="material-icons mr-3">{link.icon}</span>
                {link.name}
              </Link>
            </li>
          ))}
        </ul>
      </nav>

      {/* Logo Section and Logout Button */}
      <div className="absolute bottom-0 w-full p-4">
        {/* Logo Section */}
        <div className="border-t border-gray-700 pt-4 mb-4">
          <img
            src="/TastyTrail.png" // Replace with your logo image path
            alt="Logo"
            className="h-50 w-auto mx-auto" // You can adjust the size and styling of the logo here
          />
        </div>

        {/* Logout Button */}
        <button
          onClick={logout}
          className="w-full flex items-center justify-center p-2 rounded-lg bg-red-600 hover:bg-red-700"
        >
          <span className="material-icons mr-2">logout</span>
          Logout
        </button>
      </div>
    </div>
  );
};

export default Sidebar;

/* File: ./client_web\src\components\ui\toaster.jsx */
function _optionalChain(ops) {
  let lastAccessLHS = undefined
  let value = ops[0]
  let i = 1
  while (i < ops.length) {
    const op = ops[i]
    const fn = ops[i + 1]
    i += 2
    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
      return undefined
    }
    if (op === 'access' || op === 'optionalAccess') {
      lastAccessLHS = value
      value = fn(value)
    } else if (op === 'call' || op === 'optionalCall') {
      value = fn((...args) => value.call(lastAccessLHS, ...args))
      lastAccessLHS = undefined
    }
  }
  return value
}
;('use client')

import {
  Toaster as ChakraToaster,
  Portal,
  Spinner,
  Stack,
  Toast,
  createToaster,
} from '@chakra-ui/react'

export const toaster = createToaster({
  placement: 'bottom-end',
  pauseOnPageIdle: true,
})

export const Toaster = () => {
  return (
    <Portal>
      <ChakraToaster toaster={toaster} insetInline={{ mdDown: '4' }}>
        {(toast) => (
          <Toast.Root width={{ md: 'sm' }}>
            {toast.type === 'loading' ? (
              <Spinner size='sm' color='blue.solid' />
            ) : (
              <Toast.Indicator />
            )}
            <Stack gap='1' flex='1' maxWidth='100%'>
              {toast.title && <Toast.Title>{toast.title}</Toast.Title>}
              {toast.description && (
                <Toast.Description>{toast.description}</Toast.Description>
              )}
            </Stack>
            {toast.action && (
              <Toast.ActionTrigger>{toast.action.label}</Toast.ActionTrigger>
            )}
            {_optionalChain([
              toast,
              'access',
              (_) => _.meta,
              'optionalAccess',
              (_2) => _2.closable,
            ]) && <Toast.CloseTrigger />}
          </Toast.Root>
        )}
      </ChakraToaster>
    </Portal>
  )
}


/* File: ./client_web\src\context\AuthContext.jsx */
import { createContext, useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { userServiceApi } from "../utils/api"; // Updated import to use userServiceApi

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const token = localStorage.getItem("token");
        console.log("Auth provider Token:", token);
        if (token) {
          const response = await userServiceApi.get("/api/users/me"); // Changed to use userServiceApi
          console.log("Auth check response:", response);
          if (response.status === 401 || response.status === 404) {
            logout();
          }
          setUser(response.data.data.user);
        }
      } catch (error) {
        console.error("Auth check failed:", error);
        console.log("Error response:", error.response);
        if (error.response?.status === 401 || error.response?.status === 404) {
          logout();
        }
        logout();
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (credentials) => {
    try {
      const response = await userServiceApi.post("/api/users/login", credentials); // Changed to use userServiceApi

      // Check for error in response body
      if (response.data.error) {
        throw new Error(response.data.error);
        console.log("Login error:", response.data.error);
      }

      localStorage.setItem("token", response.data.token);
      setUser(response.data.data.user);
      return { ...response.data, user: response.data.data.user };
    } catch (error) {
      throw error;
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    setUser(null);
    navigate("/login");
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

/* File: ./client_web\src\pages\NotFound.jsx */
import { Link } from "react-router-dom";

const NotFound = () => {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-6xl font-bold text-gray-800 mb-4">404</h1>
        <h2 className="text-2xl font-semibold text-gray-700 mb-6">
          Page Not Found
        </h2>
        <p className="text-gray-600 mb-8">
          The page you are looking for doesn't exist or has been moved.
        </p>
        <Link
          to="/"
          className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300"
        >
          Go Back Home
        </Link>
      </div>
    </div>
  );
};

export default NotFound;


/* File: ./client_web\src\pages\admin\Dashboard.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi, restaurantServiceApi } from '../../utils/api';
import { AuthContext } from "../../context/AuthContext";
import { 
  MdPerson, 
  MdRestaurant, 
  MdShoppingCart, 
  MdAccessTime,
  MdTrendingUp,
  MdNotifications
} from "react-icons/md";
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell
} from 'recharts';

const AdminDashboard = () => {
  const { user } = useContext(AuthContext);
  const [stats, setStats] = useState({
    users: 0,
    restaurantAdmins: 0,
    orders: 0,
    pendingRequests: 0,
    totalRevenue: 0,
    ordersToday: 0
  });
  
  const [orderData, setOrderData] = useState([]);
  const [recentActivities, setRecentActivities] = useState([]);
  const [topRestaurants, setTopRestaurants] = useState([]);
  
  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const [usersRes, restaurantAdminsRes, ordersRes, pendingRes, revenueRes, ordersTodayRes] =
          await Promise.all([
            userServiceApi.get("/api/users?role=customer"),
            userServiceApi.get("/api/users?role=restaurant_admin"),
            restaurantServiceApi.get("/api/orders"),
            userServiceApi.get("/api/users?status=pending"),
            restaurantServiceApi.get("/api/orders/revenue"),
            restaurantServiceApi.get("/api/orders/today"),
          ]);

        setStats({
          users: usersRes.data.results,
          restaurantAdmins: restaurantAdminsRes.data.results,
          orders: ordersRes.data.results,
          pendingRequests: pendingRes.data.results,
          totalRevenue: revenueRes.data.total || 0,
          ordersToday: ordersTodayRes.data.count || 0
        });
        
        // Fetch order data for the last 7 days
        const orderHistoryRes = await restaurantServiceApi.get("/api/orders/history");
        setOrderData(orderHistoryRes.data.history || generateMockOrderData());
        
        // Fetch recent activities
        const activitiesRes = await userServiceApi.get("/api/activities");
        setRecentActivities(activitiesRes.data.activities || generateMockActivities());
        
        // Fetch top restaurants
        const topRestaurantsRes = await restaurantServiceApi.get("/api/restaurants/top");
        setTopRestaurants(topRestaurantsRes.data.restaurants || generateMockRestaurants());
        
      } catch (error) {
        console.error("Failed to fetch stats:", error);
        // Set mock data if API calls fail
        setOrderData(generateMockOrderData());
        setRecentActivities(generateMockActivities());
        setTopRestaurants(generateMockRestaurants());
      }
    };

    fetchStats();
  }, []);
  
  // Mock data generator functions
  const generateMockOrderData = () => {
    const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
    return days.map(day => ({
      name: day,
      orders: Math.floor(Math.random() * 100),
      revenue: Math.floor(Math.random() * 5000)
    }));
  };
  
  const generateMockActivities = () => {
    return [
      { id: 1, type: 'user_registered', user: 'John Doe', time: '2 hours ago' },
      { id: 2, type: 'order_placed', user: 'Sarah Smith', restaurant: 'Pizza Palace', amount: '$42.50', time: '3 hours ago' },
      { id: 3, type: 'restaurant_approved', restaurant: 'Burger Kingdom', admin: 'Admin User', time: '5 hours ago' },
      { id: 4, type: 'order_delivered', order: '#12345', restaurant: 'Taco Town', time: 'Yesterday' },
      { id: 5, type: 'user_feedback', user: 'Mike Johnson', restaurant: 'Sushi Express', rating: 5, time: 'Yesterday' }
    ];
  };
  
  const generateMockRestaurants = () => {
    return [
      { name: 'Pizza Palace', orders: 120, revenue: 4500 },
      { name: 'Burger Kingdom', orders: 90, revenue: 3200 },
      { name: 'Taco Town', orders: 75, revenue: 2800 },
      { name: 'Sushi Express', orders: 60, revenue: 3600 },
      { name: 'Pasta Paradise', orders: 45, revenue: 2100 }
    ];
  };
  
  const getActivityIcon = (type) => {
    switch(type) {
      case 'user_registered':
        return <MdPerson className="text-blue-500" />;
      case 'order_placed':
        return <MdShoppingCart className="text-green-500" />;
      case 'restaurant_approved':
        return <MdRestaurant className="text-purple-500" />;
      case 'order_delivered':
        return <MdShoppingCart className="text-orange-500" />;
      case 'user_feedback':
        return <MdNotifications className="text-yellow-500" />;
      default:
        return <MdAccessTime className="text-gray-500" />;
    }
  };
  
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Admin Dashboard</h1>
        <div className="text-sm text-gray-500">Last updated: {new Date().toLocaleString()}</div>
      </div>
      
      {/* Stat Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6 mb-8">
        <div className="bg-white p-6 rounded-lg shadow flex items-center">
          <div className="rounded-full bg-blue-100 p-3 mr-4">
            <MdPerson className="text-blue-500 text-2xl" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-gray-500">Total Users</h3>
            <p className="text-2xl font-bold">{stats.users}</p>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow flex items-center">
          <div className="rounded-full bg-purple-100 p-3 mr-4">
            <MdRestaurant className="text-purple-500 text-2xl" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-gray-500">Restaurants</h3>
            <p className="text-2xl font-bold">{stats.restaurantAdmins}</p>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow flex items-center">
          <div className="rounded-full bg-green-100 p-3 mr-4">
            <MdShoppingCart className="text-green-500 text-2xl" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-gray-500">Total Orders</h3>
            <p className="text-2xl font-bold">{stats.orders}</p>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow flex items-center">
          <div className="rounded-full bg-orange-100 p-3 mr-4">
            <MdAccessTime className="text-orange-500 text-2xl" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-gray-500">Pending Requests</h3>
            <p className="text-2xl font-bold">{stats.pendingRequests}</p>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow flex items-center">
          <div className="rounded-full bg-green-100 p-3 mr-4">
            <MdTrendingUp className="text-green-500 text-2xl" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-gray-500">Total Revenue</h3>
            <p className="text-2xl font-bold">{formatCurrency(stats.totalRevenue)}</p>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow flex items-center">
          <div className="rounded-full bg-blue-100 p-3 mr-4">
            <MdShoppingCart className="text-blue-500 text-2xl" />
          </div>
          <div>
            <h3 className="text-sm font-semibold text-gray-500">Orders Today</h3>
            <p className="text-2xl font-bold">{stats.ordersToday}</p>
          </div>
        </div>
      </div>
      
      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        {/* Orders & Revenue Chart */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-lg font-semibold mb-4">Orders & Revenue (Last 7 Days)</h2>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={orderData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis yAxisId="left" />
                <YAxis yAxisId="right" orientation="right" />
                <Tooltip />
                <Legend />
                <Line yAxisId="left" type="monotone" dataKey="orders" stroke="#8884d8" activeDot={{ r: 8 }} name="Orders" />
                <Line yAxisId="right" type="monotone" dataKey="revenue" stroke="#82ca9d" name="Revenue ($)" />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
        
        {/* Top Restaurants */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-lg font-semibold mb-4">Top Performing Restaurants</h2>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={topRestaurants}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="orders" fill="#8884d8" name="Orders" />
                <Bar dataKey="revenue" fill="#82ca9d" name="Revenue ($)" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
      
      {/* Bottom Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Recent Activities */}
        <div className="bg-white p-6 rounded-lg shadow lg:col-span-2">
          <h2 className="text-lg font-semibold mb-4">Recent Activities</h2>
          <div className="overflow-y-auto max-h-96">
            <ul className="divide-y divide-gray-200">
              {recentActivities.map(activity => (
                <li key={activity.id} className="py-4 flex">
                  <div className="mr-4">
                    {getActivityIcon(activity.type)}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center justify-between">
                      <p className="text-sm font-medium text-gray-900">
                        {activity.type === 'user_registered' && `New user registered: ${activity.user}`}
                        {activity.type === 'order_placed' && `New order placed by ${activity.user} at ${activity.restaurant}`}
                        {activity.type === 'restaurant_approved' && `Restaurant "${activity.restaurant}" approved by ${activity.admin}`}
                        {activity.type === 'order_delivered' && `Order ${activity.order} from ${activity.restaurant} delivered`}
                        {activity.type === 'user_feedback' && `${activity.user} rated ${activity.restaurant} (${activity.rating}/5)`}
                      </p>
                      <p className="text-sm text-gray-500">{activity.time}</p>
                    </div>
                    {activity.type === 'order_placed' && (
                      <p className="text-sm text-gray-500">{activity.amount}</p>
                    )}
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>
        
        {/* User Distribution */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-lg font-semibold mb-4">User Distribution</h2>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={[
                    { name: 'Users', value: stats.users },
                    { name: 'Restaurants', value: stats.restaurantAdmins },
                    { name: 'Pending', value: stats.pendingRequests }
                  ]}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                >
                  {[0, 1, 2].map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="mt-4">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                <span className="text-sm text-gray-600">Users</span>
              </div>
              <span className="text-sm font-medium">{stats.users}</span>
            </div>
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                <span className="text-sm text-gray-600">Restaurants</span>
              </div>
              <span className="text-sm font-medium">{stats.restaurantAdmins}</span>
            </div>
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                <span className="text-sm text-gray-600">Pending</span>
              </div>
              <span className="text-sm font-medium">{stats.pendingRequests}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard;

/* File: ./client_web\src\pages\admin\DeliveryPersonnel.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api"; // Import userServiceApi
import { AuthContext } from "../../context/AuthContext";

const AdminDeliveryPersonnel = () => {
  const { user } = useContext(AuthContext);
  const [deliveryPersons, setDeliveryPersons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDeliveryPersons = async () => {
      try {
        const response = await userServiceApi.get("/api/users?role=delivery_personnel"); // Use userServiceApi
        setDeliveryPersons(response.data.users);
      } catch (err) {
        setError(
          err.response?.data?.message || "Failed to fetch delivery personnel"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchDeliveryPersons();
  }, []);

  const approveDeliveryPerson = async (userId) => {
    try {
      await userServiceApi.patch("/api/users/delivery/approve", { userId }); // Use userServiceApi
      setDeliveryPersons(
        deliveryPersons.map((person) =>
          person._id === userId
            ? { ...person, isActive: true, status: "approved" }
            : person
        )
      );
    } catch (err) {
      setError(
        err.response?.data?.message || "Failed to approve delivery person"
      );
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Delivery Personnel Management</h1>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Phone
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Vehicle
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {deliveryPersons.map((person) => (
              <tr key={person._id}>
                <td className="px-6 py-4 whitespace-nowrap">{person.name}</td>
                <td className="px-6 py-4 whitespace-nowrap">{person.phone}</td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {person.vehicleInfo?.type} ({person.vehicleInfo?.number})
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span
                    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${
                      person.status === "approved"
                        ? "bg-green-100 text-green-800"
                        : person.status === "pending"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-red-100 text-red-800"
                    }`}
                  >
                    {person.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {!person.isActive && (
                    <button
                      onClick={() => approveDeliveryPerson(person._id)}
                      className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded text-sm"
                    >
                      Approve
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminDeliveryPersonnel;

/* File: ./client_web\src\pages\admin\OrderManagement.jsx */
import { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { orderServiceApi } from "../../utils/api";
import { format } from "date-fns";
import debounce from "lodash/debounce";

const OrderManagement = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const navigate = useNavigate();

  const fetchOrders = useCallback(
    debounce(async (search) => {
      try {
        setLoading(true);
        setError(null);

        const params = {
          search: search || undefined,
        };

        // Remove undefined or empty params
        Object.keys(params).forEach(
          (key) => (params[key] === undefined || params[key] === "") && delete params[key]
        );

        console.log("Fetching orders with params:", params);

        const response = await orderServiceApi.get("/api/orders", { params });

        console.log("API Response:", response.data);

        const ordersData =
          response.data?.data?.orders ||
          response.data?.orders ||
          response.data ||
          [];

        setOrders(Array.isArray(ordersData) ? ordersData : []);
      } catch (err) {
        console.error("Fetch orders error:", err);
        setError(err.response?.data?.message || "Failed to fetch orders. Please try again.");
        setOrders([]);
      } finally {
        setLoading(false);
      }
    }, 500),
    []
  );

  useEffect(() => {
    fetchOrders(searchTerm);
    return () => fetchOrders.cancel();
  }, [searchTerm, fetchOrders]);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const viewOrderDetails = (order) => {
    setSelectedOrder(order);
    setShowDetailsModal(true);
  };

  const updateOrderStatus = async (orderId, newStatus) => {
    try {
      await orderServiceApi.patch(`/api/orders/${orderId}/status`, {
        status: newStatus,
      });
      fetchOrders(searchTerm);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to update order status");
    }
  };

  const getStatusBadgeColor = (status) => {
    switch (status?.toLowerCase()) {
      case "placed":
        return "bg-blue-100 text-blue-800";
      case "confirmed":
        return "bg-purple-100 text-purple-800";
      case "preparing":
        return "bg-yellow-100 text-yellow-800";
      case "ready_for_pickup":
        return "bg-orange-100 text-orange-800";
      case "out_for_delivery":
        return "bg-indigo-100 text-indigo-800";
      case "delivered":
        return "bg-green-100 text-green-800";
      case "cancelled":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getPaymentBadgeColor = (status) => {
    switch (status?.toLowerCase()) {
      case "completed":
        return "bg-green-100 text-green-800";
      case "pending":
        return "bg-yellow-100 text-yellow-800";
      case "failed":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const handleRefresh = () => {
    fetchOrders(searchTerm);
  };

  if (error) {
    return (
      <div className="p-6 bg-gray-50 min-h-screen">
        <div className="max-w-7xl mx-auto">
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
            <p>{error}</p>
            <button
              onClick={handleRefresh}
              className="mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">Order Management</h1>
          <div className="flex items-center space-x-4">
            <div className="relative w-full md:w-96">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg
                  className="h-5 w-5 text-gray-400"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                    clipRule="evenodd"
                  />
                </svg>
              </div>
              <input
                type="text"
                placeholder="Search orders by ID, customer or restaurant..."
                className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={searchTerm}
                onChange={handleSearchChange}
              />
            </div>
            <button
              onClick={handleRefresh}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Refresh
            </button>
          </div>
        </div>

        {/* Orders Table */}
        <div className="bg-white rounded-xl shadow-md overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Order ID
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Customer
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Restaurant
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Date
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Amount
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Status
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Payment
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {loading ? (
                  <tr>
                    <td colSpan="7" className="px-6 py-4 text-center">
                      <div className="flex justify-center items-center h-64">
                        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                      </div>
                    </td>
                  </tr>
                ) : orders.length > 0 ? (
                  orders.map((order) => (
                    <tr
                      key={order._id}
                      className="hover:bg-gray-50 cursor-pointer"
                      onClick={() => viewOrderDetails(order)}
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          #{order._id?.substring(0, 8) || "N/A"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {order.customerInfo?.name || "N/A"}
                        </div>
                        <div className="text-sm text-gray-500">
                          {order.customerInfo?.email || "N/A"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {order.restaurantId?.name || order.restaurantName || order.restaurant?.name || "N/A"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {order.createdAt
                            ? format(new Date(order.createdAt), "MMM dd, yyyy HH:mm")
                            : "N/A"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          ${order.totalAmount?.toFixed(2) || "0.00"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadgeColor(
                            order.trackingStatus
                          )}`}
                        >
                          {order.trackingStatus
                            ? order.trackingStatus
                                .split("_")
                                .map(
                                  (word) =>
                                    word.charAt(0).toUpperCase() + word.slice(1)
                                )
                                .join(" ")
                            : "N/A"}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getPaymentBadgeColor(
                            order.paymentStatus
                          )}`}
                        >
                          {order.paymentStatus
                            ? order.paymentStatus.charAt(0).toUpperCase() +
                              order.paymentStatus.slice(1)
                            : "N/A"}
                        </span>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="7" className="px-6 py-8 text-center">
                      <div className="flex flex-col items-center justify-center">
                        <svg
                          className="mx-auto h-12 w-12 text-gray-400"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                          />
                        </svg>
                        <h3 className="mt-2 text-sm font-medium text-gray-900">
                          No orders found
                        </h3>
                        <p className="mt-1 text-sm text-gray-500">
                          Try adjusting your search criteria
                        </p>
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Order Details Modal */}
        {showDetailsModal && selectedOrder && (
          <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
            <div className="bg-white rounded-xl shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-semibold text-gray-800">
                    Order Details - #{selectedOrder._id?.substring(0, 8) || "N/A"}
                  </h2>
                  <button
                    onClick={() => setShowDetailsModal(false)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M6 18L18 6M6 6l12 12"
                      />
                    </svg>
                  </button>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">Customer Information</h3>
                    <p className="mt-2 text-sm text-gray-600">
                      Name: {selectedOrder.customerInfo?.name || "N/A"}
                    </p>
                    <p className="mt-1 text-sm text-gray-600">
                      Email: {selectedOrder.customerInfo?.email || "N/A"}
                    </p>
                    <p className="mt-1 text-sm text-gray-600">
                      Phone: {selectedOrder.customerInfo?.phone || "N/A"}
                    </p>
                    <p className="mt-1 text-sm text-gray-600">
                      Address: {selectedOrder.customerInfo?.address || "N/A"}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">Order Information</h3>
                    <p className="mt-2 text-sm text-gray-600">
                      Restaurant: {selectedOrder.restaurantId?.name || selectedOrder.restaurantName || selectedOrder.restaurant?.name || "N/A"}
                    </p>
                    <p className="mt-1 text-sm text-gray-600">
                      Date: {selectedOrder.createdAt
                        ? format(new Date(selectedOrder.createdAt), "MMM dd, yyyy HH:mm")
                        : "N/A"}
                    </p>
                    <p className="mt-1 text-sm text-gray-600">
                      Total: ${selectedOrder.totalAmount?.toFixed(2) || "0.00"}
                    </p>
                    <p className="mt-1 text-sm text-gray-600">
                      Payment Method: {selectedOrder.paymentMethod || "N/A"}
                    </p>
                  </div>
                </div>
                <div className="mt-6">
                  <h3 className="text-lg font-medium text-gray-900">Order Items</h3>
                  <div className="mt-2 border-t border-gray-200">
                    {selectedOrder.items?.length > 0 ? (
                      selectedOrder.items.map((item, index) => (
                        <div key={index} className="py-3 border-b border-gray-200">
                          <div className="flex justify-between">
                            <p className="text-sm text-gray-600">
                              {item.name || "Unknown Item"} {item.variation ? `(${item.variation})` : ""}
                            </p>
                            <p className="text-sm text-gray-600">
                              ${item.price?.toFixed(2) || "0.00"} x {item.quantity || 1}
                            </p>
                          </div>
                          {item.notes && (
                            <p className="text-sm text-gray-500 mt-1">Notes: {item.notes}</p>
                          )}
                        </div>
                      ))
                    ) : (
                      <p className="text-sm text-gray-600 py-3">No items found</p>
                    )}
                  </div>
                </div>
                <div className="mt-6">
                  <h3 className="text-lg font-medium text-gray-900">Status Updates</h3>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {["placed", "confirmed", "preparing", "ready_for_pickup", "out_for_delivery", "delivered"].map(
                      (status) => (
                        <button
                          key={status}
                          onClick={() => updateOrderStatus(selectedOrder._id, status)}
                          className={`px-3 py-1 text-sm font-medium rounded-md ${
                            selectedOrder.trackingStatus === status
                              ? "bg-blue-500 text-white"
                              : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                          }`}
                        >
                          {status
                            .split("_")
                            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
                            .join(" ")}
                        </button>
                      )
                    )}
                    <button
                      onClick={() => updateOrderStatus(selectedOrder._id, "cancelled")}
                      className={`px-3 py-1 text-sm font-medium rounded-md ${
                        selectedOrder.trackingStatus === "cancelled"
                          ? "bg-red-500 text-white"
                          : "bg-red-200 text-red-700 hover:bg-red-300"
                      }`}
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderManagement;

/* File: ./client_web\src\pages\admin\RestaurantAdmins.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api"; // Import userServiceApi
import { AuthContext } from "../../context/AuthContext";

const AdminRestaurantAdmins = () => {
  const { user } = useContext(AuthContext);
  const [admins, setAdmins] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchAdmins = async () => {
      try {
        const response = await userServiceApi.get("/api/users?role=restaurant_admin");
        setAdmins(response.data.users);
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch admins");
      } finally {
        setLoading(false);
      }
    };

    fetchAdmins();
  }, []);

  const approveAdmin = async (userId, restaurantId) => {
    try {
      await userServiceApi.patch("/api/users/restaurant-admin/approve", {
        userId,
        restaurantId,
      });
      setAdmins(
        admins.map((admin) =>
          admin._id === userId
            ? { ...admin, isActive: true, status: "approved" }
            : admin
        )
      );
    } catch (err) {
      setError(err.response?.data?.message || "Failed to approve admin");
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Restaurant Admins Management</h1>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Email
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Restaurant
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {admins.map((admin) => (
              <tr key={admin._id}>
                <td className="px-6 py-4 whitespace-nowrap">{admin.name}</td>
                <td className="px-6 py-4 whitespace-nowrap">{admin.email}</td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {admin.restaurantDetails?.name || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span
                    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${
                      admin.status === "approved"
                        ? "bg-green-100 text-green-800"
                        : admin.status === "pending"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-red-100 text-red-800"
                    }`}
                  >
                    {admin.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {!admin.isActive && (
                    <button
                      onClick={() =>
                        approveAdmin(admin._id, "restaurant-id-here")
                      }
                      className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded text-sm"
                    >
                      Approve
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminRestaurantAdmins;


/* File: ./client_web\src\pages\admin\RestaurantManagement.jsx */
import RestaurantAdminAssignment from "../../components/RestaurantAdminAssignment";
import { useState, useEffect } from "react";
import { restaurantServiceApi } from "../../utils/api";
import { useNavigate } from "react-router-dom";
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

import icon from 'leaflet/dist/images/marker-icon.png';
import iconShadow from 'leaflet/dist/images/marker-shadow.png';
import iconRetina from 'leaflet/dist/images/marker-icon-2x.png';

// Fix for default marker icons in Leaflet
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: iconRetina,
  iconUrl: icon,
  shadowUrl: iconShadow
});

// Component to handle map click events
function LocationMarker({ position, setPosition, setAddressFromCoordinates }) {
  const map = useMapEvents({
    async click(e) {
      const newPosition = e.latlng;
      setPosition(newPosition);
      map.flyTo(newPosition, map.getZoom());
      
      // Fetch address details when position changes
      try {
        const response = await fetch(
          `https://nominatim.openstreetmap.org/reverse?format=json&lat=${newPosition.lat}&lon=${newPosition.lng}`
        );
        const data = await response.json();
        
        if (data.address) {
          setAddressFromCoordinates({
            street: data.address.road || data.address.pedestrian || '',
            city: data.address.city || data.address.town || data.address.village || '',
            country: data.address.country || ''
          });
        }
      } catch (error) {
        console.error("Error fetching address:", error);
      }
    },
  });

  return position === null ? null : (
    <Marker position={position}>
      <Popup>Restaurant location</Popup>
    </Marker>
  );
}

const RestaurantManagement = () => {
  const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredRestaurants, setFilteredRestaurants] = useState([]);
  const [restaurants, setRestaurants] = useState([]);
  const [newRestaurant, setNewRestaurant] = useState({
    name: "",
    description: "",
    address: {
      street: "",
      city: "",
      country: "",
      geoCoordinates: {
        longitude: "",
        latitude: "",
      },
    },
    operatingHours: {
      from: "",
      to: ""
    },
    menu: [
      {
        name: "",
        description: "",
        price: "",
        category: "",
        image: null
      }
    ]
  });
  const [coverImage, setCoverImage] = useState(null);
  const [menuItemImages, setMenuItemImages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [selectedRestaurant, setSelectedRestaurant] = useState(null);
  const [showAdminModal, setShowAdminModal] = useState(false);
  const [position, setPosition] = useState(null);
  const [isFetchingAddress, setIsFetchingAddress] = useState(false);

  // Set default position to a reasonable location (e.g., Colombo, Sri Lanka)
  const defaultPosition = [6.9271, 79.8612];

  // Fetch restaurants when component mounts
  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await restaurantServiceApi.get("/api/restaurants");
        if (response.data?.status === "success" && Array.isArray(response.data?.data?.restaurants)) {
          const restaurantData = response.data.data.restaurants;
          setRestaurants(restaurantData);
          setFilteredRestaurants(restaurantData);
        } else {
          setError("Invalid response format: Expected an array.");
        }
      } catch (err) {
        setError("Error fetching restaurants.");
      }
    };

    fetchRestaurants();
  }, []);

  // Update form data when position changes
  useEffect(() => {
    if (position) {
      setNewRestaurant(prev => ({
        ...prev,
        address: {
          ...prev.address,
          geoCoordinates: {
            longitude: position.lng.toString(),
            latitude: position.lat.toString()
          }
        }
      }));
    }
  }, [position]);

  // Filter restaurants based on search term
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredRestaurants(restaurants);
      return;
    }
    
    const filtered = restaurants.filter(restaurant => 
      restaurant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      restaurant.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      restaurant.address?.city.toLowerCase().includes(searchTerm.toLowerCase()) ||
      restaurant.address?.street.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    setFilteredRestaurants(filtered);
  }, [searchTerm, restaurants]);

  const setAddressFromCoordinates = (address) => {
    setNewRestaurant(prev => ({
      ...prev,
      address: {
        ...prev.address,
        street: address.street,
        city: address.city,
        country: address.country
      }
    }));
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewRestaurant(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleAddressChange = (e) => {
    const { name, value } = e.target;
    setNewRestaurant(prev => ({
      ...prev,
      address: {
        ...prev.address,
        [name]: value,
      },
    }));
  };

  const handleOperatingHoursChange = (e) => {
    const { name, value } = e.target;
    setNewRestaurant(prev => ({
      ...prev,
      operatingHours: {
        ...prev.operatingHours,
        [name]: value,
      },
    }));
  };

  const handleCoverImageChange = (e) => {
    setCoverImage(e.target.files[0]);
  };

  const handleMenuItemChange = (index, e) => {
    const { name, value } = e.target;
    const updatedMenu = [...newRestaurant.menu];
    updatedMenu[index] = {
      ...updatedMenu[index],
      [name]: value
    };
    setNewRestaurant(prev => ({
      ...prev,
      menu: updatedMenu
    }));
  };

  const handleMenuItemImageChange = (index, e) => {
    const files = e.target.files;
    if (files && files[0]) {
      const updatedImages = [...menuItemImages];
      updatedImages[index] = files[0];
      setMenuItemImages(updatedImages);
    }
  };

  const addMenuItem = () => {
    setNewRestaurant(prev => ({
      ...prev,
      menu: [
        ...prev.menu,
        {
          name: "",
          description: "",
          price: "",
          category: "",
          image: null
        }
      ]
    }));
  };

  const removeMenuItem = (index) => {
    const updatedMenu = [...newRestaurant.menu];
    updatedMenu.splice(index, 1);
    setNewRestaurant(prev => ({
      ...prev,
      menu: updatedMenu
    }));
    
    const updatedImages = [...menuItemImages];
    updatedImages.splice(index, 1);
    setMenuItemImages(updatedImages);
  };

  const handleCreateRestaurant = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // Validate that a location has been selected
      if (!position) {
        throw new Error('Please select a location on the map');
      }

      const formData = new FormData();
      
      // Append basic fields
      formData.append("name", newRestaurant.name.trim());
      formData.append("description", newRestaurant.description?.trim() || '');
      
      // Append address with proper numeric conversion
      formData.append("address", JSON.stringify({
        street: newRestaurant.address.street?.trim() || '',
        city: newRestaurant.address.city?.trim() || '',
        country: newRestaurant.address.country?.trim() || '',
        geoCoordinates: {
          longitude: position.lng,
          latitude: position.lat
        }
      }));
      
      // Append operating hours with defaults
      formData.append("operatingHours", JSON.stringify({
        from: newRestaurant.operatingHours.from || '09:00',
        to: newRestaurant.operatingHours.to || '21:00'
      }));
      
      // Process and validate menu items
      const validatedMenu = newRestaurant.menu.map(item => ({
        name: item.name?.trim() || 'Unnamed Item',
        description: item.description?.trim() || '',
        price: parseFloat(item.price) || 0,
        category: item.category?.trim() || 'other'
      }));
      
      formData.append("menu", JSON.stringify(validatedMenu));
      
      // Handle file uploads
      if (coverImage) {
        if (!coverImage.type.match('image.*')) {
          throw new Error('Cover image must be an image file');
        }
        formData.append("coverImage", coverImage);
      }

      menuItemImages.forEach((image, index) => {
        if (image) {
          if (!image.type.match('image.*')) {
            throw new Error(`Menu item image ${index + 1} must be an image file`);
          }
          formData.append("menuItemImages", image);
        }
      });

      const response = await restaurantServiceApi.post("/api/restaurants", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
          Authorization: `Bearer ${localStorage.getItem('token')}`
        },
        timeout: 10000
      });

      if (response.data?.status === 'success') {
        const restaurantResponse = await restaurantServiceApi.get("/api/restaurants");
        const newRestaurants = restaurantResponse.data.data.restaurants;
        setRestaurants(newRestaurants);
        setFilteredRestaurants(newRestaurants);
        
        setNewRestaurant({
          name: "",
          description: "",
          address: {
            street: "",
            city: "",
            country: "",
            geoCoordinates: {
              longitude: "",
              latitude: "",
            },
          },
          operatingHours: {
            from: "",
            to: ""
          },
          menu: [
            {
              name: "",
              description: "",
              price: "",
              category: "",
              image: null
            }
          ]
        });
        setCoverImage(null);
        setMenuItemImages([]);
        setPosition(null);
        setShowModal(false);
      }
    } catch (err) {
      console.error("Error creating restaurant:", err);
      setError(err.response?.data?.message || 
              err.message || 
              "Error creating restaurant. Please check your inputs and try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">Restaurant Management</h1>
          <button
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg shadow-md transition duration-200"
            onClick={() => setShowModal(true)}
          >
            + Create Restaurant
          </button>
        </div>

        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
            <p>{error}</p>
          </div>
        )}

        {showModal && (
          <div className="fixed inset-0 flex justify-center items-center bg-black bg-opacity-50 z-50 p-4">
            <div className="bg-white rounded-xl shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-semibold text-gray-800">Create New Restaurant</h2>
                  <button 
                    onClick={() => setShowModal(false)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <form onSubmit={handleCreateRestaurant} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Restaurant Name*</label>
                      <input
                        type="text"
                        name="name"
                        value={newRestaurant.name}
                        onChange={handleChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                        placeholder="e.g. Burger King"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Description*</label>
                      <input
                        type="text"
                        name="description"
                        value={newRestaurant.description}
                        onChange={handleChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                        placeholder="Short description about the restaurant"
                      />
                    </div>
                  </div>

                  <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">Location</h3>
                    <p className="text-sm text-gray-600 mb-4">
                      Click on the map to select the restaurant location. Address fields will be automatically filled.
                    </p>
                    <div className="h-64 w-full rounded-lg overflow-hidden">
                      <MapContainer 
                        center={defaultPosition} 
                        zoom={13} 
                        style={{ height: '100%', width: '100%' }}
                        className="z-0"
                      >
                        <TileLayer
                          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                        />
                        <LocationMarker 
                          position={position ? [position.lat, position.lng] : null} 
                          setPosition={setPosition}
                          setAddressFromCoordinates={setAddressFromCoordinates}
                        />
                      </MapContainer>
                    </div>
                    <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Latitude</label>
                        <input
                          type="text"
                          value={position ? position.lat.toFixed(6) : ''}
                          readOnly
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-100"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Longitude</label>
                        <input
                          type="text"
                          value={position ? position.lng.toFixed(6) : ''}
                          readOnly
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-100"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">Address Details</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Street*</label>
                        <input
                          type="text"
                          name="street"
                          value={newRestaurant.address.street}
                          onChange={handleAddressChange}
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                          placeholder="Street address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">City*</label>
                        <input
                          type="text"
                          name="city"
                          value={newRestaurant.address.city}
                          onChange={handleAddressChange}
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                          placeholder="City"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Country*</label>
                        <input
                          type="text"
                          name="country"
                          value={newRestaurant.address.country}
                          onChange={handleAddressChange}
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                          placeholder="Country"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">Operating Hours</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Opening Time*</label>
                        <input
                          type="time"
                          name="from"
                          value={newRestaurant.operatingHours.from}
                          onChange={handleOperatingHoursChange}
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Closing Time*</label>
                        <input
                          type="time"
                          name="to"
                          value={newRestaurant.operatingHours.to}
                          onChange={handleOperatingHoursChange}
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                        />
                      </div>
                    </div>
                  </div>

                  <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="text-lg font-semibold text-gray-800">Menu Items</h3>
                      <button
                        type="button"
                        onClick={addMenuItem}
                        className="flex items-center text-blue-600 hover:text-blue-800"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
                        </svg>
                        Add Item
                      </button>
                    </div>

                    {newRestaurant.menu.map((item, index) => (
                      <div key={index} className="bg-white p-4 mb-4 rounded-lg border border-gray-200">
                        <div className="flex justify-between items-center mb-3">
                          <h4 className="font-medium text-gray-700">Menu Item #{index + 1}</h4>
                          <button
                            type="button"
                            onClick={() => removeMenuItem(index)}
                            className="text-red-500 hover:text-red-700 text-sm flex items-center"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                            </svg>
                            Remove
                          </button>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Item Name*</label>
                            <input
                              type="text"
                              name="name"
                              value={item.name}
                              onChange={(e) => handleMenuItemChange(index, e)}
                              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              required
                              placeholder="e.g. Cheeseburger"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Category*</label>
                            <input
                              type="text"
                              name="category"
                              value={item.category}
                              onChange={(e) => handleMenuItemChange(index, e)}
                              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              required
                              placeholder="e.g. Burgers"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Price*</label>
                            <input
                              type="number"
                              name="price"
                              value={item.price}
                              onChange={(e) => handleMenuItemChange(index, e)}
                              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              step="0.01"
                              min="0"
                              required
                              placeholder="0.00"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            <input
                              type="text"
                              name="description"
                              value={item.description}
                              onChange={(e) => handleMenuItemChange(index, e)}
                              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="Item description"
                            />
                          </div>
                          <div className="md:col-span-2">
                            <label className="block text-sm font-medium text-gray-700 mb-1">Image</label>
                            <input
                              type="file"
                              onChange={(e) => handleMenuItemImageChange(index, e)}
                              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              accept="image/*"
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Cover Image*
                    </label>
                    <div className="flex items-center">
                      <input
                        type="file"
                        onChange={handleCoverImageChange}
                        className="block w-full text-sm text-gray-500
                          file:mr-4 file:py-2 file:px-4
                          file:rounded-lg file:border-0
                          file:text-sm file:font-semibold
                          file:bg-blue-50 file:text-blue-700
                          hover:file:bg-blue-100"
                        required
                        accept="image/*"
                      />
                    </div>
                    <p className="mt-1 text-sm text-gray-500">This will be the main image for your restaurant</p>
                  </div>

                  <div className="flex justify-end space-x-4 pt-4">
                    <button
                      type="button"
                      onClick={() => setShowModal(false)}
                      className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition duration-200"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg shadow-md transition duration-200 disabled:opacity-50"
                      disabled={loading}
                    >
                      {loading ? (
                        <span className="flex items-center">
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Creating...
                        </span>
                      ) : 'Create Restaurant'}
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}

        <div className="bg-white rounded-xl shadow-md overflow-hidden max-w-full">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-800">All Restaurants</h2>
          </div>

          <div className="mb-6">
            <div className="relative">
              <input
                type="text"
                placeholder="Search restaurants by name, description, or location..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
              />
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              {searchTerm && (
                <button 
                  onClick={() => setSearchTerm("")}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </button>
              )}
            </div>
          </div>

          <div className="overflow-x-auto w-full">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">Name</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">Description</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">Address</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/8">Hours</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/8">Menu</th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredRestaurants.map((restaurant) => (
                  <tr key={restaurant._id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="font-medium text-gray-900">{restaurant.name}</div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-500 max-w-[200px] truncate">{restaurant.description}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">
                        {restaurant.address?.street}, {restaurant.address?.city}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">
                        {restaurant.operatingHours?.from} - {restaurant.operatingHours?.to}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        {restaurant.menu?.length || 0} items
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end space-x-2">
                        <button
                          onClick={() => {
                            setSelectedRestaurant(restaurant._id);
                            setShowAdminModal(true);
                          }}
                          className="text-blue-600 hover:text-blue-900 flex items-center"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                          </svg>
                          Admins
                        </button>
                        <button className="text-yellow-600 hover:text-yellow-900 flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                          </svg>
                          Edit
                        </button>
                        <button className="text-red-600 hover:text-red-900 flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
              {filteredRestaurants.length === 0 && (
                <tr>
                  <td colSpan="6" className="px-6 py-12 text-center">
                    <div className="flex flex-col items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <p className="text-gray-500 text-lg font-medium mb-1">No restaurants found</p>
                      <p className="text-gray-400 text-sm">Try adjusting your search term</p>
                    </div>
                  </td>
                </tr>
              )}
            </table>
          </div>
        </div>
      </div>

      {showAdminModal && (
        <RestaurantAdminAssignment 
          restaurantId={selectedRestaurant}
          onClose={() => setShowAdminModal(false)}
        />
      )}
    </div>
  );
};

export default RestaurantManagement;

/* File: ./client_web\src\pages\admin\Users.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api";
import { AuthContext } from "../../context/AuthContext";

const AdminUsers = () => {
  const { user } = useContext(AuthContext);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [activeTab, setActiveTab] = useState("all");

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await userServiceApi.get("/api/users");
        setUsers(response.data.data.users);
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch users");
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  const toggleUserStatus = async (userId, isActive, userRole, currentStatus) => {
    try {
      let updateData = { isActive: !isActive };
      
      if (userRole === 'delivery_personnel') {
        if (!isActive) {
          updateData.status = 'approved';
        } else {
          updateData.status = 'rejected';
        }
      } else {
        updateData.status = !isActive ? 'active' : 'inactive';
      }
  
      await userServiceApi.patch(`/api/users/${userId}`, updateData);
      
      setUsers(
        users.map((user) =>
          user._id === userId ? { 
            ...user, 
            isActive: !isActive,
            status: updateData.status 
          } : user
        )
      );
    } catch (err) {
      setError(err.response?.data?.message || "Failed to update user status");
    }
  };

  const filteredUsers = users.filter((user) => {
    const matchesSearch = 
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (user.phone && user.phone.toLowerCase().includes(searchTerm.toLowerCase()));
    
    switch (activeTab) {
      case 'customer':
        return matchesSearch && user.role === 'customer' && user.isActive;
      case 'admin':
        return matchesSearch && user.role === 'admin' && user.isActive;
      case 'restaurant_admin':
        return matchesSearch && user.role === 'restaurant_admin' && user.isActive;
      case 'delivery_personnel':
        return matchesSearch && user.role === 'delivery_personnel' && user.isActive;
      case 'inactive':
        return matchesSearch && !user.isActive;
      default:
        return matchesSearch;
    }
  });

  const getRoleBadgeColor = (role) => {
    switch (role) {
      case 'admin':
        return 'bg-purple-100 text-purple-800';
      case 'restaurant_admin':
        return 'bg-yellow-100 text-yellow-800';
      case 'delivery_personnel':
        return 'bg-blue-100 text-blue-800';
      case 'customer':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) return (
    <div className="flex justify-center items-center h-64">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );

  if (error) return (
    <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
      <p>{error}</p>
    </div>
  );

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">User Management</h1>
          <div className="relative w-full md:w-1/3">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Search users by name, email or phone..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {/* Role-based tabs */}
        <div className="mb-6 bg-white rounded-xl shadow-md overflow-hidden">
          <div className="border-b border-gray-200">
            <nav className="flex -mb-px">
              {['all', 'customer', 'admin', 'restaurant_admin', 'delivery_personnel', 'inactive'].map((tab) => {
                const tabLabels = {
                  all: 'All Users',
                  customer: 'Customers',
                  admin: 'System Admins',
                  restaurant_admin: 'Restaurant Admins',
                  delivery_personnel: 'Delivery Personnel',
                  inactive: 'Inactive'
                };
                
                return (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm ${
                      activeTab === tab
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    {tabLabels[tab]}
                  </button>
                );
              })}
            </nav>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-md overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Name
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Email
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Phone
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Role
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredUsers.length > 0 ? (
                  filteredUsers.map((user) => (
                    <tr key={user._id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                            <span className="text-gray-600 font-medium">
                              {user.name.charAt(0).toUpperCase()}
                            </span>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">{user.name}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{user.email}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">{user.phone || 'N/A'}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadgeColor(user.role)}`}>
                          {user.role ? user.role.replace(/_/g, ' ') : 'customer'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full 
                          ${
                            user.isActive
                              ? "bg-green-100 text-green-800"
                              : "bg-red-100 text-red-800"
                          }`}
                        >
                          {user.isActive ? "Active" : "Inactive"}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          onClick={() => toggleUserStatus(user._id, user.isActive, user.role, user.status)}
                          className={`inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                            user.isActive
                              ? "bg-red-600 hover:bg-red-700"
                              : "bg-green-600 hover:bg-green-700"
                          }`}
                        >
                          {user.isActive ? (
                            <>
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18.364 5.636l-12.728 12.728M5.636 5.636l12.728 12.728" />
                              </svg>
                              Deactivate
                            </>
                          ) : (
                            <>
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                              </svg>
                              Activate
                            </>
                          )}
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="6" className="px-6 py-8 text-center">
                      <div className="flex flex-col items-center justify-center">
                        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <h3 className="mt-2 text-sm font-medium text-gray-900">No users found</h3>
                        <p className="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria</p>
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminUsers;

/* File: ./client_web\src\pages\Auth\Login.jsx */
import { useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../../context/AuthContext";

const Login = () => {
  const [credentials, setCredentials] = useState({
    email: "",
    password: "",
  });
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setCredentials({
      ...credentials,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const { email, password } = credentials;
      const response = await login({ email, password });

      // Redirect based on role
      if (response.user.role === "admin") {
        navigate("/admin");
      } else if (response.user.role === "restaurant_admin") {
        navigate("/restaurant-admin");
      } else {
        navigate("/");
      }

    } catch (err) {
      setError(err.response?.data?.message || "Login failed");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div
      className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-100 to-blue-50 py-12 px-4 sm:px-6 lg:px-8"
      style={{
        backgroundImage: `url('https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80')`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundBlendMode: 'overlay',
        backgroundColor: 'rgba(255, 255, 255, 0.7)',
      }}
    >
      <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8 space-y-8">
        {/* Logo */}
        <div className="flex justify-center">
          <img
            src="/TastyTrail.png"
            alt="TastyTrail Logo"
            className="h-30 w-auto"
          />
        </div>

        {/* Title */}
        <div>
          <h2 className="text-center text-3xl font-bold text-gray-900">
            Admin Dashboard Login
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Sign in to manage your food ordering platform
          </p>
        </div>

        {/* Error Message */}
        {error && (
          <div className="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 rounded">
            {error}
          </div>
        )}

        {/* Form */}
        <form className="space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            {/* Email Field */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150"
                value={credentials.email}
                onChange={handleChange}
              />
            </div>

            {/* Password Field */}
            <div>
              <label
                For="password"
                className="block text-sm font-medium text-gray-700"
              >
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                autoComplete="current-password"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150"
                value={credentials.password}
                onChange={handleChange}
              />
            </div>
          </div>

          {/* Remember Me and Forgot Password */}
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label
                htmlFor="remember-me"
                className="ml-2 block text-sm text-gray-900"
              >
                Remember me
              </label>
            </div>

            <div className="text-sm">
              <a
                href="#"
                className="font-medium text-blue-600 hover:text-blue-500 transition duration-150"
              >
                Forgot your password?
              </a>
            </div>
          </div>

          {/* Submit Button */}
          <div>
            <button
              type="submit"
              disabled={loading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition duration-150"
            >
              {loading ? "Signing in..." : "Sign in"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Login;

/* File: ./client_web\src\pages\Auth\RestaurantAdminRequest.jsx */
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import {userServiceApi, restaurantServiceApi} from "../../utils/api";

const RestaurantAdminRequest = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    restaurantName: "",
    licenseNumber: "",
    address: "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      await userServiceApi.post("/api/users/restaurant-admin/request", formData);
      setSuccess(true);
      setTimeout(() => navigate("/login"), 3000);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to submit request");
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full text-center">
          <h2 className="text-2xl font-bold mb-4 text-green-600">
            Request Submitted!
          </h2>
          <p className="mb-6">
            Your restaurant admin request has been submitted for approval.
            You'll be notified once it's processed.
          </p>
          <p>Redirecting to login page...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-md">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Restaurant Admin Request
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Fill out the form to request restaurant admin access
          </p>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
            {error}
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm space-y-4">
            <div>
              <label
                htmlFor="name"
                className="block text-sm font-medium text-gray-700"
              >
                Full Name
              </label>
              <input
                id="name"
                name="name"
                type="text"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.name}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                Email Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.email}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="phone"
                className="block text-sm font-medium text-gray-700"
              >
                Phone Number
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.phone}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="restaurantName"
                className="block text-sm font-medium text-gray-700"
              >
                Restaurant Name
              </label>
              <input
                id="restaurantName"
                name="restaurantName"
                type="text"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.restaurantName}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="licenseNumber"
                className="block text-sm font-medium text-gray-700"
              >
                License Number
              </label>
              <input
                id="licenseNumber"
                name="licenseNumber"
                type="text"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.licenseNumber}
                onChange={handleChange}
              />
            </div>

            <div>
              <label
                htmlFor="address"
                className="block text-sm font-medium text-gray-700"
              >
                Restaurant Address
              </label>
              <textarea
                id="address"
                name="address"
                rows="3"
                required
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={formData.address}
                onChange={handleChange}
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? "Submitting..." : "Submit Request"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RestaurantAdminRequest;


/* File: ./client_web\src\pages\restaurant-admin\Dashboard.jsx */
import { useContext, useEffect, useState, useRef } from "react";
import { restaurantServiceApi } from "../../utils/api";
import { AuthContext } from "../../context/AuthContext";
import { toast } from "react-toastify";
import { MdEdit, MdDelete } from "react-icons/md";

const RestaurantAdminDashboard = () => {
  const { user } = useContext(AuthContext);
  const [restaurant, setRestaurant] = useState(null);
  const [menuItems, setMenuItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [activeTab, setActiveTab] = useState("all");
  const [newMenuItem, setNewMenuItem] = useState({
    name: "",
    description: "",
    price: "",
    category: "main",
  });
  const [editMode, setEditMode] = useState(false);
  const [currentItemId, setCurrentItemId] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const retryCountRef = useRef(0);
  const maxRetries = 3;

  useEffect(() => {
    const fetchData = async () => {
      if (!user || !user.restaurantId) {
        if (retryCountRef.current < maxRetries) {
          retryCountRef.current += 1;
          setTimeout(() => {
            console.log(`Retrying fetch (attempt ${retryCountRef.current}/${maxRetries})...`);
            fetchData();
          }, 1000);
          return;
        }
        setError("No restaurant ID found for this user");
        setLoading(false);
        toast.error("No restaurant ID found", { theme: "colored" });
        return;
      }

      try {
        setLoading(true);
        console.log("Fetching restaurant data for ID:", user.restaurantId);

        const restaurantRes = await restaurantServiceApi.get(`/api/restaurants/${user.restaurantId}`);
        console.log("Restaurant API response:", restaurantRes);

        const restaurantData = restaurantRes.data.data?.restaurant || restaurantRes.data.restaurant;
        if (!restaurantData) {
          throw new Error("Restaurant data not found in response");
        }

        setRestaurant(restaurantData);
        const menu = restaurantData.menu || [];
        setMenuItems(Array.isArray(menu) ? menu : []);
        retryCountRef.current = 0;
      } catch (err) {
        console.error("Fetch error:", err);
        console.error("Error response:", err.response?.data);
        setError(err.response?.data?.message || err.message || "Failed to fetch restaurant data");
        toast.error("Failed to load restaurant data", { theme: "colored" });
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user]);

  const validateForm = () => {
    const errors = {};
    if (!newMenuItem.name.trim()) errors.name = "Name is required";
    if (!newMenuItem.price || parseFloat(newMenuItem.price) <= 0) errors.price = "Price must be a positive number";
    if (newMenuItem.description && newMenuItem.description.length > 200) errors.description = "Description must be 200 characters or less";
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewMenuItem((prev) => ({ ...prev, [name]: value }));
    setFormErrors((prev) => ({ ...prev, [name]: null }));
  };

  const handleAddMenuItem = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    try {
      const response = await restaurantServiceApi.post(
        `/api/restaurants/${user.restaurantId}/menu`,
        newMenuItem
      );

      console.log("Add menu item response:", response);

      if (response.data.status === "success") {
        setMenuItems((prev) => [...prev, response.data.data.menuItem]);
        resetForm();
        setShowModal(false);
        toast.success("Menu item added successfully", { theme: "colored" });
      } else {
        throw new Error(response.data.message || "Failed to add menu item");
      }
    } catch (err) {
      console.error("Add menu item error:", err);
      console.error("Error response:", err.response?.data);
      toast.error(err.response?.data?.message || err.response?.data?.error || err.message || "Failed to add menu item", {
        theme: "colored",
      });
    }
  };

  const handleEditMenuItem = (item) => {
    setEditMode(true);
    setCurrentItemId(item._id);
    setNewMenuItem({
      name: item.name || "",
      description: item.description || "",
      price: item.price ? item.price.toString() : "",
      category: item.category || "main",
    });
    setShowModal(true);
  };

  const handleUpdateMenuItem = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    try {
      const response = await restaurantServiceApi.put(
        `/api/restaurants/${user.restaurantId}/menu/${currentItemId}`,
        newMenuItem
      );

      console.log("Update menu item response:", response);

      const updatedItems = menuItems.map((item) => (item._id === currentItemId ? response.data.data.menuItem : item));
      setMenuItems(updatedItems);
      resetForm();
      setShowModal(false);
      toast.success("Menu item updated successfully", { theme: "colored" });
    } catch (err) {
      console.error("Update menu item error:", err);
      console.error("Error response:", err.response?.data);
      toast.error(err.response?.data?.message || "Failed to update menu item", { theme: "colored" });
    }
  };

  const handleDeleteMenuItem = async (itemId) => {
    if (!window.confirm("Are you sure you want to delete this menu item?")) return;

    try {
      const response = await restaurantServiceApi.delete(`/api/restaurants/${user.restaurantId}/menu/${itemId}`);
      console.log("Delete menu item response:", response);

      const updatedItems = menuItems.filter((item) => item._id !== itemId);
      setMenuItems(updatedItems);
      toast.success("Menu item deleted successfully", { theme: "colored" });
    } catch (err) {
      console.error("Delete menu item error:", err);
      console.error("Error response:", err.response?.data);
      toast.error(err.response?.data?.message || "Failed to delete menu item", { theme: "colored" });
    }
  };

  const resetForm = () => {
    setEditMode(false);
    setCurrentItemId(null);
    setNewMenuItem({
      name: "",
      description: "",
      price: "",
      category: "main",
    });
    setFormErrors({});
  };

  const getCategoryBadgeColor = (category) => {
    switch (category) {
      case "appetizer":
        return "bg-orange-100 text-orange-800";
      case "main":
        return "bg-green-100 text-green-800";
      case "dessert":
        return "bg-pink-100 text-pink-800";
      case "beverage":
        return "bg-blue-100 text-blue-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const filteredMenuItems = menuItems.filter((item) => {
    const matchesSearch =
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()));
    
    switch (activeTab) {
      case "appetizer":
        return matchesSearch && item.category === "appetizer";
      case "main":
        return matchesSearch && item.category === "main";
      case "dessert":
        return matchesSearch && item.category === "dessert";
      case "beverage":
        return matchesSearch && item.category === "beverage";
      default:
        return matchesSearch;
    }
  });

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
        <p>{error}</p>
      </div>
    );
  }

  if (!restaurant) {
    return (
      <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6 rounded">
        <p>No restaurant data found. Please check the restaurant ID or API configuration.</p>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">{restaurant.name} - Menu Management</h1>
          <div className="relative w-full md:w-1/3">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Search menu items by name or description..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              aria-label="Search menu items"
            />
          </div>
        </div>

        {/* Category Tabs */}
        <div className="mb-6 bg-white rounded-xl shadow-md overflow-hidden">
          <div className="border-b border-gray-200">
            <nav className="flex -mb-px">
              {["all", "appetizer", "main", "dessert", "beverage"].map((tab) => {
                const tabLabels = {
                  all: "All Items",
                  appetizer: "Appetizers",
                  main: "Main Courses",
                  dessert: "Desserts",
                  beverage: "Beverages",
                };
                return (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm ${
                      activeTab === tab
                        ? "border-blue-500 text-blue-600"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                    }`}
                    aria-label={`Filter by ${tabLabels[tab]}`}
                  >
                    {tabLabels[tab]}
                  </button>
                );
              })}
            </nav>
          </div>
        </div>

        {/* Add Menu Item Button */}
        <div className="mb-6">
          <button
            onClick={() => {
              resetForm();
              setShowModal(true);
            }}
            className="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            aria-label="Add new menu item"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
            </svg>
            Add Menu Item
          </button>
        </div>

        {/* Menu Items Table */}
        <div className="bg-white rounded-xl shadow-md overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Name
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Category
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Price
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Description
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredMenuItems.length > 0 ? (
                  filteredMenuItems.map((item) => (
                    <tr key={item._id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{item.name}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getCategoryBadgeColor(item.category)}`}>
                          {item.category}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{`LKR ${item.price.toFixed(2)}`}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500 max-w-xs truncate">{item.description || "N/A"}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <button
                            onClick={() => handleEditMenuItem(item)}
                            className="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                            aria-label="Edit menu item"
                          >
                            <MdEdit className="h-4 w-4 mr-1" />
                            Edit
                          </button>
                          <button
                            onClick={() => handleDeleteMenuItem(item._id)}
                            className="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700"
                            aria-label="Delete menu item"
                          >
                            <MdDelete className="h-4 w-4 mr-1" />
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="5" className="px-6 py-8 text-center">
                      <div className="flex flex-col items-center justify-center">
                        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <h3 className="mt-2 text-sm font-medium text-gray-900">No menu items found</h3>
                        <p className="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria</p>
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Add/Edit Menu Item Modal */}
        {showModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-xl shadow-md max-w-lg w-full mx-4">
              <h2 className="text-xl font-bold text-gray-800 mb-4">
                {editMode ? "Edit Menu Item" : "Add Menu Item"}
              </h2>
              <form onSubmit={editMode ? handleUpdateMenuItem : handleAddMenuItem} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Name</label>
                  <input
                    type="text"
                    name="name"
                    value={newMenuItem.name}
                    onChange={handleInputChange}
                    className={`mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      formErrors.name ? "border-red-500" : ""
                    }`}
                    required
                    placeholder="Enter item name"
                    aria-describedby={formErrors.name ? "name-error" : undefined}
                  />
                  {formErrors.name && (
                    <p id="name-error" className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Category</label>
                  <select
                    name="category"
                    value={newMenuItem.category}
                    onChange={handleInputChange}
                    className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="appetizer">Appetizer</option>
                    <option value="main">Main Course</option>
                    <option value="dessert">Dessert</option>
                    <option value="beverage">Beverage</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Price (LKR)</label>
                  <input
                    type="number"
                    name="price"
                    value={newMenuItem.price}
                    onChange={handleInputChange}
                    step="0.01"
                    min="0"
                    className={`mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      formErrors.price ? "border-red-500" : ""
                    }`}
                    required
                    placeholder="Enter price"
                    aria-describedby={formErrors.price ? "price-error" : undefined}
                  />
                  {formErrors.price && (
                    <p id="price-error" className="mt-1 text-sm text-red-600">{formErrors.price}</p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Description</label>
                  <input
                    type="text"
                    name="description"
                    value={newMenuItem.description}
                    onChange={handleInputChange}
                    className={`mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      formErrors.description ? "border-red-500" : ""
                    }`}
                    placeholder="Enter description (optional)"
                    maxLength="200"
                    aria-describedby={formErrors.description ? "description-error" : undefined}
                  />
                  {formErrors.description && (
                    <p id="description-error" className="mt-1 text-sm text-red-600">{formErrors.description}</p>
                  )}
                </div>
                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => {
                      resetForm();
                      setShowModal(false);
                    }}
                    className="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                    aria-label="Cancel"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                    aria-label={editMode ? "Update menu item" : "Add menu item"}
                  >
                    {editMode ? "Update Item" : "Add Item"}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default RestaurantAdminDashboard;

/* File: ./client_web\src\pages\restaurant-admin\Profile.jsx */
import { useContext, useEffect, useState } from "react";
import { userServiceApi } from "../../utils/api";
import { AuthContext } from "../../context/AuthContext";
import { toast } from "react-toastify";
import { MdEdit, MdPerson, MdEmail, MdPhone, MdLocationOn, MdRestaurant } from "react-icons/md";

const RestaurantAdminProfile = () => {
  const { user } = useContext(AuthContext);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
  });

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const response = await userServiceApi.get("api/users/me");
        console.log("Full API Response:", response);

        const userData = response.data?.data?.user || response.data?.user || response.data;
        
        if (!userData) {
          throw new Error("User data not found in response");
        }

        console.log("Extracted User Data:", userData);
        
        setProfile(userData);
        setFormData({
          name: userData.name || "",
          email: userData.email || "",
          phone: userData.phone || "",
          address: userData.address || "",
        });
      } catch (err) {
        console.error("Profile fetch error:", err);
        setError(err.response?.data?.message || err.message || "Failed to fetch profile");
        toast.error(err.response?.data?.message || "Failed to fetch profile", { theme: "colored" });
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, []);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await userServiceApi.patch("api/users/update-me", formData);
      const updatedUser = response.data?.data?.user || response.data?.user || response.data;
      setProfile(updatedUser);
      setEditMode(false);
      toast.success("Profile updated successfully", { theme: "colored" });
    } catch (err) {
      console.error("Profile update error:", err);
      setError(err.response?.data?.message || "Failed to update profile");
      toast.error(err.response?.data?.message || "Failed to update profile", { theme: "colored" });
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
        <p>{error}</p>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6 rounded">
        <p>No profile data available</p>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">Profile Management</h1>
          <button
            onClick={() => setEditMode(true)}
            className="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            aria-label="Edit profile"
          >
            <MdEdit className="h-4 w-4 mr-1" />
            Edit Profile
          </button>
        </div>

        {/* Profile Details */}
        <div className="bg-white rounded-xl shadow-md p-6">
          <div className="flex items-center mb-6">
            <div className="flex-shrink-0 h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
              <MdPerson className="text-gray-600 text-2xl" />
            </div>
            <div className="ml-4">
              <h2 className="text-xl font-semibold text-gray-900">{profile.name || "N/A"}</h2>
              <p className="text-sm text-gray-500">Restaurant Admin</p>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Email</h3>
              <p className="mt-1 text-sm text-gray-900">{profile.email || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Phone</h3>
              <p className="mt-1 text-sm text-gray-900">{profile.phone || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Address</h3>
              <p className="mt-1 text-sm text-gray-900">{profile.address || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Restaurant ID</h3>
              <p className="mt-1 text-sm text-gray-900">{profile.restaurantId || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-gray-500">Status</h3>
              <p className="mt-1 text-sm text-gray-900">
                <span
                  className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    profile.isActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
                  }`}
                >
                  {profile.isActive ? "Active" : "Inactive"}
                </span>
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Edit Profile Modal */}
      {editMode && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-xl shadow-md max-w-lg w-full mx-4">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Edit Profile</h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Name</label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <MdPerson className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                    placeholder="Enter name"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Email</label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <MdEmail className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-gray-100 shadow-sm cursor-not-allowed"
                    disabled
                    placeholder="Enter email"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Phone</label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <MdPhone className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                    placeholder="Enter phone number"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Address</label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <MdLocationOn className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="text"
                    name="address"
                    value={formData.address}
                    onChange={handleChange}
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter address"
                  />
                </div>
              </div>
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => setEditMode(false)}
                  className="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default RestaurantAdminProfile;

/* File: ./client_web\src\utils\api.jsx */
import axios from "axios";

// Create an axios instance for user service (running on port 3000)
const userServiceApi = axios.create({
  baseURL: "http://localhost:3000", // User service running on port 3000
});

// Create an axios instance for restaurant service (running on port 3001)
const restaurantServiceApi = axios.create({
  baseURL: "http://localhost:3001", // Restaurant service running on port 3001
});

const orderServiceApi = axios.create({
  baseURL: "http://localhost:3002", // Order service running on port 3002
});

// Add a request interceptor to include the token for both services
const addAuthToken = (config) => {
  const token = localStorage.getItem("token");
  console.log("[INTERCEPTOR] Sending token:", token);

  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
};

// Interceptor for User Service API
userServiceApi.interceptors.request.use(
  addAuthToken,
  (error) => Promise.reject(error)
);

// Interceptor for Restaurant Service API
restaurantServiceApi.interceptors.request.use(
  addAuthToken,
  (error) => Promise.reject(error)
);

// Add request interceptor to include auth token
orderServiceApi.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Add a response interceptor (Optional): Can be used to handle token expiration or error logging
const handleResponseError = (error) => {
  if (error.response && error.response.status === 401) {
    console.error("Unauthorized request. Please login again.");
  }
  return Promise.reject(error);
};

// Add response interceptors for both services
userServiceApi.interceptors.response.use(
  (response) => response,
  handleResponseError
);

restaurantServiceApi.interceptors.response.use(
  (response) => response,
  handleResponseError
);

// Export the instances to use for different services
export { userServiceApi, restaurantServiceApi, orderServiceApi };
