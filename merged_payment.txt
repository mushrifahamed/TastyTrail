
/* File: ./server/payment-service\server.js */
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const morgan = require("morgan");
const connectDB = require("./config/db");
const paymentRoutes = require("./routes/paymentRoutes");
const errorHandler = require("./utils/errorHandler");
require("dotenv").config();

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true })); // For parsing application/x-www-form-urlencoded
app.use(morgan("dev"));

// Database connection
connectDB();

// Routes
app.use("/api/payments", paymentRoutes);

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.status(200).json({ status: "OK", timestamp: new Date() });
});

// Error handling middleware
app.use(errorHandler);

const PORT = process.env.PORT || 3003;
app.listen(PORT, () => {
  console.log(`Payment service running on port ${PORT}`);
});

module.exports = app;


/* File: ./server/payment-service\config\db.js */
const mongoose = require("mongoose");
require("dotenv").config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("MongoDB connected successfully");
  } catch (error) {
    console.error("MongoDB connection error:", error);
    process.exit(1);
  }
};

module.exports = connectDB;


/* File: ./server/payment-service\controllers\paymentController.js */
const Payment = require("../models/Payment");
const paymentService = require("../services/paymentService");
const notificationService = require("../services/notificationService");
const axios = require("axios");
require("dotenv").config();

// Create a new payment
const createPayment = async (req, res, next) => {
  try {
    const { orderId, amount, customerId, description, paymentMethod } =
      req.body;

    // Validate required fields
    if (!orderId || !amount || !customerId) {
      return res.status(400).json({
        message: "Missing required fields",
        required: ["orderId", "amount", "customerId"],
      });
    }

    // Check if payment already exists for this order
    const existingPayment = await Payment.findOne({ orderId });
    if (existingPayment) {
      return res.status(400).json({
        message: "Payment already exists for this order",
        paymentId: existingPayment._id,
      });
    }

    // Fetch customer info from user service using the user's token
    let customerInfo;
    try {
      // Extract the token part from the Authorization header
      const authHeader = req.headers.authorization;
      const token =
        authHeader &&
        typeof authHeader === "string" &&
        authHeader.startsWith("Bearer ")
          ? authHeader.split(" ")[1]
          : null;

      if (!token) {
        throw new Error("No valid authorization token provided");
      }

      // Use the /me endpoint with the user's token
      const response = await axios.get(
        `${process.env.USER_SERVICE_URL}/api/users/me`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      customerInfo = response.data.data.user;
    } catch (error) {
      console.error("Error fetching customer info:", error);
      // Use fallback data instead of failing
      customerInfo = {
        name: "Customer",
        phone: "Unknown",
      };
    }

    // Convert description to string if it's an object
    const descriptionStr =
      typeof description === "object"
        ? JSON.stringify(description)
        : description || `Payment for order #${orderId}`;

    // Create payment record (without items field)
    const payment = new Payment({
      orderId,
      customerId,
      amount,
      currency: req.body.currency || "LKR",
      description: descriptionStr,
      paymentMethod: paymentMethod,
    });

    const savedPayment = await payment.save();

    // Generate payment parameters
    const paymentParams = paymentService.generatePaymentParams(
      orderId,
      amount,
      payment.currency,
      `Order #${orderId}`, // Simple description instead of items array
      customerId,
      customerInfo,
      paymentMethod
    );

    // Generate payment URL
    const paymentUrl = paymentService.getPaymentUrl(paymentParams);

    res.status(201).json({
      paymentId: savedPayment._id,
      checkoutUrl: paymentUrl,
      paymentParams: paymentParams,
    });
  } catch (error) {
    next(error);
  }
};

// Process payment notification from PayHere
const processNotification = async (req, res, next) => {
  try {
    const {
      merchant_id,
      order_id,
      payment_id,
      payhere_amount,
      payhere_currency,
      status_code,
      md5sig,
      method,
    } = req.body;

    console.log("Payment notification received:", {
      order_id,
      payment_id,
      status_code,
    });

    // Verify the signature
    const isValidSignature = paymentService.verifyPaymentSignature(
      merchant_id,
      order_id,
      payhere_amount,
      payhere_currency,
      status_code,
      md5sig
    );

    if (!isValidSignature) {
      console.error("Invalid payment signature for order:", order_id);
      return res.status(400).json({ message: "Invalid payment signature" });
    }

    // Find the payment
    const payment = await Payment.findOne({ orderId: order_id });
    if (!payment) {
      console.error("Payment not found for order:", order_id);
      return res.status(404).json({ message: "Payment not found" });
    }

    // Update payment status based on status code
    let paymentStatus;
    switch (status_code) {
      case "2":
        paymentStatus = "completed";
        break;
      case "0":
        paymentStatus = "pending";
        break;
      case "-1":
        paymentStatus = "cancelled";
        break;
      case "-2":
        paymentStatus = "failed";
        break;
      case "-3":
        paymentStatus = "chargedback";
        break;
      default:
        paymentStatus = "pending";
    }

    // Update payment record
    payment.status = paymentStatus;
    payment.paymentId = payment_id;
    payment.paymentMethod = method;
    payment.statusCode = status_code;
    payment.md5sig = md5sig;
    await payment.save();

    // Notify order service about payment status
    await notificationService.notifyOrderService(
      order_id,
      paymentStatus,
      payment_id
    );

    // Respond to PayHere
    res.status(200).send("Payment notification received");
  } catch (error) {
    console.error("Error processing payment notification:", error);
    next(error);
  }
};

// Get payment by ID
const getPaymentById = async (req, res, next) => {
  try {
    const payment = await Payment.findById(req.params.id);
    if (!payment) {
      return res.status(404).json({ message: "Payment not found" });
    }
    res.status(200).json(payment);
  } catch (error) {
    next(error);
  }
};

// Get payment by order ID
const getPaymentByOrderId = async (req, res, next) => {
  try {
    const payment = await Payment.findOne({ orderId: req.params.orderId });
    if (!payment) {
      return res.status(404).json({ message: "Payment not found" });
    }
    res.status(200).json(payment);
  } catch (error) {
    next(error);
  }
};

// Get payments by customer ID
const getPaymentsByCustomerId = async (req, res, next) => {
  try {
    const payments = await Payment.find({ customerId: req.params.customerId });
    res.status(200).json(payments);
  } catch (error) {
    next(error);
  }
};

// Process refund
const processRefund = async (req, res, next) => {
  try {
    const { paymentId, amount, reason } = req.body;
    const payment = await Payment.findById(paymentId);
    if (!payment) {
      return res.status(404).json({ message: "Payment not found" });
    }

    if (payment.status !== "completed") {
      return res
        .status(400)
        .json({ message: "Only completed payments can be refunded" });
    }

    // In a real implementation, you would call PayHere's refund API here
    // For sandbox, we'll just update the status
    payment.status = "refunded";
    await payment.save();

    // Notify order service about refund
    await notificationService.notifyOrderService(
      payment.orderId,
      "refunded",
      payment.paymentId
    );

    res.status(200).json({ message: "Refund processed successfully", payment });
  } catch (error) {
    next(error);
  }
};

module.exports = {
  createPayment,
  processNotification,
  getPaymentById,
  getPaymentByOrderId,
  getPaymentsByCustomerId,
  processRefund,
};


/* File: ./server/payment-service\models\Payment.js */
const mongoose = require("mongoose");

const paymentSchema = new mongoose.Schema({
  orderId: {
    type: String,
    required: true,
    unique: true,
  },
  customerId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  amount: {
    type: Number,
    required: true,
  },
  currency: {
    type: String,
    required: true,
    default: "LKR",
    enum: ["LKR"],
  },
  status: {
    type: String,
    enum: [
      "pending",
      "completed",
      "failed",
      "refunded",
      "cancelled",
      "chargedback",
    ],
    default: "pending",
  },
  paymentId: {
    type: String,
  },
  paymentMethod: {
    type: String,
  },
  statusCode: {
    type: String,
  },
  description: {
    type: String,
  },
  hash: {
    type: String,
  },
  md5sig: {
    type: String,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

paymentSchema.pre("save", function (next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model("Payment", paymentSchema);


/* File: ./server/payment-service\routes\paymentRoutes.js */
const express = require("express");
const router = express.Router();
const {
  createPayment,
  processNotification,
  getPaymentById,
  getPaymentByOrderId,
  getPaymentsByCustomerId,
  processRefund,
} = require("../controllers/paymentController");
const authMiddleware = require("../utils/authMiddleware");

// Create a new payment (internal service call)
router.post(
  "/",
  authMiddleware(["customer", "restaurant_admin", "admin", "internal_service"]),
  createPayment
);

// Process payment notification from PayHere (no auth - public endpoint)
router.post("/notify", processNotification);

// Get payment by ID
router.get(
  "/:id",
  authMiddleware(["customer", "restaurant_admin", "admin", "internal_service"]),
  getPaymentById
);

// Get payment by order ID
router.get(
  "/order/:orderId",
  authMiddleware(["customer", "restaurant_admin", "admin", "internal_service"]),
  getPaymentByOrderId
);

// Get payments by customer ID
router.get(
  "/customer/:customerId",
  authMiddleware(["customer", "admin", "internal_service"]),
  getPaymentsByCustomerId
);

// Process refund
router.post(
  "/refund",
  authMiddleware(["admin", "restaurant_admin", "internal_service"]),
  processRefund
);

module.exports = router;


/* File: ./server/payment-service\services\notificationService.js */
// Update ./server/payment-service/services/notificationService.js
const axios = require("axios");
require("dotenv").config();

const { ORDER_SERVICE_URL } = process.env;

module.exports = {
  notifyOrderService: async (orderId, paymentStatus, paymentId) => {
    try {
      // Add error handling for missing ORDER_SERVICE_URL
      if (!ORDER_SERVICE_URL) {
        console.error("ORDER_SERVICE_URL not defined in environment variables");
        return false;
      }

      // Use x-api-key instead of Bearer token for internal service communication
      await axios.post(
        `${ORDER_SERVICE_URL}/api/orders/${orderId}/payment-update`,
        {
          paymentStatus,
          paymentId,
        },
        {
          headers: {
            "x-api-key": process.env.INTERNAL_API_KEY,
          },
        }
      );
      console.log(
        `Order service notified about payment ${paymentStatus} for order ${orderId}`
      );
      return true;
    } catch (error) {
      console.error(
        `Error notifying order service about payment ${paymentStatus}:`,
        error.message
      );
      // Don't fail the whole process if notification fails
      return false;
    }
  },
};


/* File: ./server/payment-service\services\paymentService.js */
const crypto = require("crypto");
require("dotenv").config();

const MERCHANT_ID = process.env.PAYHERE_MERCHANT_ID;
const MERCHANT_SECRET = process.env.PAYHERE_MERCHANT_SECRET;
const PAYHERE_URL =
  process.env.NODE_ENV === "production"
    ? "https://www.payhere.lk/pay/checkout"
    : "https://sandbox.payhere.lk/pay/checkout";

const generateHash = (orderId, amount, currency) => {
  // Convert amount to string with 2 decimal places
  const amountStr = parseFloat(amount).toFixed(2);

  // Generate hash as per PayHere documentation
  return crypto
    .createHash("md5")
    .update(
      MERCHANT_ID +
        orderId +
        amountStr +
        currency +
        crypto
          .createHash("md5")
          .update(MERCHANT_SECRET)
          .digest("hex")
          .toUpperCase()
    )
    .digest("hex")
    .toUpperCase();
};

const verifyPaymentSignature = (
  merchantId,
  orderId,
  amount,
  currency,
  statusCode,
  receivedMd5sig
) => {
  try {
    // Convert amount to string with 2 decimal places
    const amountStr = parseFloat(amount).toFixed(2);

    // Generate local md5sig for verification
    const localMd5sig = crypto
      .createHash("md5")
      .update(
        merchantId +
          orderId +
          amountStr +
          currency +
          statusCode +
          crypto
            .createHash("md5")
            .update(MERCHANT_SECRET)
            .digest("hex")
            .toUpperCase()
      )
      .digest("hex")
      .toUpperCase();

    // Compare local signature with received signature
    return localMd5sig === receivedMd5sig;
  } catch (error) {
    console.error("Error verifying payment signature:", error);
    return false;
  }
};

const generatePaymentParams = (
  orderId,
  amount,
  currency,
  customerId,
  customerInfo
) => {
  // Generate hash
  const hash = generateHash(orderId, amount, currency);

  // Prepare payment parameters
  return {
    merchant_id: MERCHANT_ID,
    return_url: process.env.PAYHERE_RETURN_URL,
    cancel_url: process.env.PAYHERE_CANCEL_URL,
    notify_url: process.env.PAYHERE_NOTIFY_URL,
    order_id: orderId,
    currency: currency,
    amount: parseFloat(amount).toFixed(2),
    first_name:
      customerInfo?.firstName ||
      customerInfo?.name?.split(" ")[0] ||
      "Customer",
    last_name:
      customerInfo?.lastName ||
      customerInfo?.name?.split(" ").slice(1).join(" ") ||
      "",
    email: customerInfo?.email || "customer@example.com",
    phone: customerInfo?.phone || "0000000000",
    address: customerInfo?.address || "N/A",
    city: customerInfo?.city || "Colombo",
    country: customerInfo?.country || "Sri Lanka",
    hash: hash,
  };
};

const getPaymentUrl = (params) => {
  // Convert params to URL query string
  const queryString = Object.entries(params)
    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
    .join("&");

  return `${PAYHERE_URL}?${queryString}`;
};

module.exports = {
  generateHash,
  verifyPaymentSignature,
  generatePaymentParams,
  getPaymentUrl,
  MERCHANT_ID,
  PAYHERE_URL,
};


/* File: ./server/payment-service\utils\authMiddleware.js */
const jwt = require("jsonwebtoken");
const mongoose = require("mongoose");
require("dotenv").config();

module.exports = (allowedRoles) => {
  return (req, res, next) => {
    // First check for internal API key
    if (req.headers["x-api-key"] === process.env.INTERNAL_API_KEY) {
      // For internal service calls, create a valid ObjectId instead of "system"

      console.log(req.headers["x-api-key"]);
      req.user = {
        id: new mongoose.Types.ObjectId("000000000000000000000000"),
        role: "internal_service",
      };

      // Check if internal_service role is allowed
      if (!allowedRoles.includes("internal_service")) {
        return res
          .status(403)
          .json({ message: "Insufficient permissions for internal service" });
      }

      return next();
    }

    // If no internal API key, proceed with JWT authentication
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
      return res.status(401).json({ message: "Authentication required" });
    }

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.user = decoded;

      if (!allowedRoles.includes(decoded.role)) {
        return res.status(403).json({ message: "Insufficient permissions" });
      }

      next();
    } catch (error) {
      return res.status(401).json({ message: "Invalid token" });
    }
  };
};


/* File: ./server/payment-service\utils\errorHandler.js */
module.exports = (err, req, res, next) => {
  console.error(err.stack);

  if (err.name === "ValidationError") {
    return res.status(400).json({
      message: "Validation error",
      details: err.message,
    });
  }

  if (err.isAxiosError) {
    return res.status(502).json({
      message: "Error communicating with dependent service",
      details: err.message,
    });
  }

  res.status(500).json({ message: "Something went wrong" });
};

